// Code generated by Prisma (prisma@1.34.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  period: (where?: PeriodWhereInput) => Promise<boolean>;
  gaStats: (where?: gaStatsWhereInput) => Promise<boolean>;
  gcAccountData: (where?: gcAccountDataWhereInput) => Promise<boolean>;
  gcCollabData: (where?: gcCollabDataWhereInput) => Promise<boolean>;
  gcConnexData: (where?: gcConnexDataWhereInput) => Promise<boolean>;
  gcMessageData: (where?: gcMessageDataWhereInput) => Promise<boolean>;
  gcPediaData: (where?: gcPediaDataWhereInput) => Promise<boolean>;
  gcWikiData: (where?: gcWikiDataWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  period: (where: PeriodWhereUniqueInput) => PeriodNullablePromise;
  periods: (args?: {
    where?: PeriodWhereInput;
    orderBy?: PeriodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Period>;
  periodsConnection: (args?: {
    where?: PeriodWhereInput;
    orderBy?: PeriodOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PeriodConnectionPromise;
  gaStats: (where: gaStatsWhereUniqueInput) => gaStatsNullablePromise;
  gaStatses: (args?: {
    where?: gaStatsWhereInput;
    orderBy?: gaStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gaStats>;
  gaStatsesConnection: (args?: {
    where?: gaStatsWhereInput;
    orderBy?: gaStatsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gaStatsConnectionPromise;
  gcAccountData: (
    where: gcAccountDataWhereUniqueInput
  ) => gcAccountDataNullablePromise;
  gcAccountDatas: (args?: {
    where?: gcAccountDataWhereInput;
    orderBy?: gcAccountDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gcAccountData>;
  gcAccountDatasConnection: (args?: {
    where?: gcAccountDataWhereInput;
    orderBy?: gcAccountDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gcAccountDataConnectionPromise;
  gcCollabData: (
    where: gcCollabDataWhereUniqueInput
  ) => gcCollabDataNullablePromise;
  gcCollabDatas: (args?: {
    where?: gcCollabDataWhereInput;
    orderBy?: gcCollabDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gcCollabData>;
  gcCollabDatasConnection: (args?: {
    where?: gcCollabDataWhereInput;
    orderBy?: gcCollabDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gcCollabDataConnectionPromise;
  gcConnexData: (
    where: gcConnexDataWhereUniqueInput
  ) => gcConnexDataNullablePromise;
  gcConnexDatas: (args?: {
    where?: gcConnexDataWhereInput;
    orderBy?: gcConnexDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gcConnexData>;
  gcConnexDatasConnection: (args?: {
    where?: gcConnexDataWhereInput;
    orderBy?: gcConnexDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gcConnexDataConnectionPromise;
  gcMessageData: (
    where: gcMessageDataWhereUniqueInput
  ) => gcMessageDataNullablePromise;
  gcMessageDatas: (args?: {
    where?: gcMessageDataWhereInput;
    orderBy?: gcMessageDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gcMessageData>;
  gcMessageDatasConnection: (args?: {
    where?: gcMessageDataWhereInput;
    orderBy?: gcMessageDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gcMessageDataConnectionPromise;
  gcPediaData: (
    where: gcPediaDataWhereUniqueInput
  ) => gcPediaDataNullablePromise;
  gcPediaDatas: (args?: {
    where?: gcPediaDataWhereInput;
    orderBy?: gcPediaDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gcPediaData>;
  gcPediaDatasConnection: (args?: {
    where?: gcPediaDataWhereInput;
    orderBy?: gcPediaDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gcPediaDataConnectionPromise;
  gcWikiData: (where: gcWikiDataWhereUniqueInput) => gcWikiDataNullablePromise;
  gcWikiDatas: (args?: {
    where?: gcWikiDataWhereInput;
    orderBy?: gcWikiDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<gcWikiData>;
  gcWikiDatasConnection: (args?: {
    where?: gcWikiDataWhereInput;
    orderBy?: gcWikiDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => gcWikiDataConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPeriod: (data: PeriodCreateInput) => PeriodPromise;
  updatePeriod: (args: {
    data: PeriodUpdateInput;
    where: PeriodWhereUniqueInput;
  }) => PeriodPromise;
  updateManyPeriods: (args: {
    data: PeriodUpdateManyMutationInput;
    where?: PeriodWhereInput;
  }) => BatchPayloadPromise;
  upsertPeriod: (args: {
    where: PeriodWhereUniqueInput;
    create: PeriodCreateInput;
    update: PeriodUpdateInput;
  }) => PeriodPromise;
  deletePeriod: (where: PeriodWhereUniqueInput) => PeriodPromise;
  deleteManyPeriods: (where?: PeriodWhereInput) => BatchPayloadPromise;
  creategaStats: (data: gaStatsCreateInput) => gaStatsPromise;
  updategaStats: (args: {
    data: gaStatsUpdateInput;
    where: gaStatsWhereUniqueInput;
  }) => gaStatsPromise;
  updateManygaStatses: (args: {
    data: gaStatsUpdateManyMutationInput;
    where?: gaStatsWhereInput;
  }) => BatchPayloadPromise;
  upsertgaStats: (args: {
    where: gaStatsWhereUniqueInput;
    create: gaStatsCreateInput;
    update: gaStatsUpdateInput;
  }) => gaStatsPromise;
  deletegaStats: (where: gaStatsWhereUniqueInput) => gaStatsPromise;
  deleteManygaStatses: (where?: gaStatsWhereInput) => BatchPayloadPromise;
  creategcAccountData: (data: gcAccountDataCreateInput) => gcAccountDataPromise;
  updategcAccountData: (args: {
    data: gcAccountDataUpdateInput;
    where: gcAccountDataWhereUniqueInput;
  }) => gcAccountDataPromise;
  updateManygcAccountDatas: (args: {
    data: gcAccountDataUpdateManyMutationInput;
    where?: gcAccountDataWhereInput;
  }) => BatchPayloadPromise;
  upsertgcAccountData: (args: {
    where: gcAccountDataWhereUniqueInput;
    create: gcAccountDataCreateInput;
    update: gcAccountDataUpdateInput;
  }) => gcAccountDataPromise;
  deletegcAccountData: (
    where: gcAccountDataWhereUniqueInput
  ) => gcAccountDataPromise;
  deleteManygcAccountDatas: (
    where?: gcAccountDataWhereInput
  ) => BatchPayloadPromise;
  creategcCollabData: (data: gcCollabDataCreateInput) => gcCollabDataPromise;
  updategcCollabData: (args: {
    data: gcCollabDataUpdateInput;
    where: gcCollabDataWhereUniqueInput;
  }) => gcCollabDataPromise;
  updateManygcCollabDatas: (args: {
    data: gcCollabDataUpdateManyMutationInput;
    where?: gcCollabDataWhereInput;
  }) => BatchPayloadPromise;
  upsertgcCollabData: (args: {
    where: gcCollabDataWhereUniqueInput;
    create: gcCollabDataCreateInput;
    update: gcCollabDataUpdateInput;
  }) => gcCollabDataPromise;
  deletegcCollabData: (
    where: gcCollabDataWhereUniqueInput
  ) => gcCollabDataPromise;
  deleteManygcCollabDatas: (
    where?: gcCollabDataWhereInput
  ) => BatchPayloadPromise;
  creategcConnexData: (data: gcConnexDataCreateInput) => gcConnexDataPromise;
  updategcConnexData: (args: {
    data: gcConnexDataUpdateInput;
    where: gcConnexDataWhereUniqueInput;
  }) => gcConnexDataPromise;
  updateManygcConnexDatas: (args: {
    data: gcConnexDataUpdateManyMutationInput;
    where?: gcConnexDataWhereInput;
  }) => BatchPayloadPromise;
  upsertgcConnexData: (args: {
    where: gcConnexDataWhereUniqueInput;
    create: gcConnexDataCreateInput;
    update: gcConnexDataUpdateInput;
  }) => gcConnexDataPromise;
  deletegcConnexData: (
    where: gcConnexDataWhereUniqueInput
  ) => gcConnexDataPromise;
  deleteManygcConnexDatas: (
    where?: gcConnexDataWhereInput
  ) => BatchPayloadPromise;
  creategcMessageData: (data: gcMessageDataCreateInput) => gcMessageDataPromise;
  updategcMessageData: (args: {
    data: gcMessageDataUpdateInput;
    where: gcMessageDataWhereUniqueInput;
  }) => gcMessageDataPromise;
  updateManygcMessageDatas: (args: {
    data: gcMessageDataUpdateManyMutationInput;
    where?: gcMessageDataWhereInput;
  }) => BatchPayloadPromise;
  upsertgcMessageData: (args: {
    where: gcMessageDataWhereUniqueInput;
    create: gcMessageDataCreateInput;
    update: gcMessageDataUpdateInput;
  }) => gcMessageDataPromise;
  deletegcMessageData: (
    where: gcMessageDataWhereUniqueInput
  ) => gcMessageDataPromise;
  deleteManygcMessageDatas: (
    where?: gcMessageDataWhereInput
  ) => BatchPayloadPromise;
  creategcPediaData: (data: gcPediaDataCreateInput) => gcPediaDataPromise;
  updategcPediaData: (args: {
    data: gcPediaDataUpdateInput;
    where: gcPediaDataWhereUniqueInput;
  }) => gcPediaDataPromise;
  updateManygcPediaDatas: (args: {
    data: gcPediaDataUpdateManyMutationInput;
    where?: gcPediaDataWhereInput;
  }) => BatchPayloadPromise;
  upsertgcPediaData: (args: {
    where: gcPediaDataWhereUniqueInput;
    create: gcPediaDataCreateInput;
    update: gcPediaDataUpdateInput;
  }) => gcPediaDataPromise;
  deletegcPediaData: (where: gcPediaDataWhereUniqueInput) => gcPediaDataPromise;
  deleteManygcPediaDatas: (
    where?: gcPediaDataWhereInput
  ) => BatchPayloadPromise;
  creategcWikiData: (data: gcWikiDataCreateInput) => gcWikiDataPromise;
  updategcWikiData: (args: {
    data: gcWikiDataUpdateInput;
    where: gcWikiDataWhereUniqueInput;
  }) => gcWikiDataPromise;
  updateManygcWikiDatas: (args: {
    data: gcWikiDataUpdateManyMutationInput;
    where?: gcWikiDataWhereInput;
  }) => BatchPayloadPromise;
  upsertgcWikiData: (args: {
    where: gcWikiDataWhereUniqueInput;
    create: gcWikiDataCreateInput;
    update: gcWikiDataUpdateInput;
  }) => gcWikiDataPromise;
  deletegcWikiData: (where: gcWikiDataWhereUniqueInput) => gcWikiDataPromise;
  deleteManygcWikiDatas: (where?: gcWikiDataWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  period: (
    where?: PeriodSubscriptionWhereInput
  ) => PeriodSubscriptionPayloadSubscription;
  gaStats: (
    where?: gaStatsSubscriptionWhereInput
  ) => gaStatsSubscriptionPayloadSubscription;
  gcAccountData: (
    where?: gcAccountDataSubscriptionWhereInput
  ) => gcAccountDataSubscriptionPayloadSubscription;
  gcCollabData: (
    where?: gcCollabDataSubscriptionWhereInput
  ) => gcCollabDataSubscriptionPayloadSubscription;
  gcConnexData: (
    where?: gcConnexDataSubscriptionWhereInput
  ) => gcConnexDataSubscriptionPayloadSubscription;
  gcMessageData: (
    where?: gcMessageDataSubscriptionWhereInput
  ) => gcMessageDataSubscriptionPayloadSubscription;
  gcPediaData: (
    where?: gcPediaDataSubscriptionWhereInput
  ) => gcPediaDataSubscriptionPayloadSubscription;
  gcWikiData: (
    where?: gcWikiDataSubscriptionWhereInput
  ) => gcWikiDataSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PeriodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC";

export type gaStatsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "numSessions_ASC"
  | "numSessions_DESC"
  | "avgPageviewsPerSession_ASC"
  | "avgPageviewsPerSession_DESC"
  | "avgSessionDuration_ASC"
  | "avgSessionDuration_DESC"
  | "avgPageLoadTime_ASC"
  | "avgPageLoadTime_DESC"
  | "bounceRate_ASC"
  | "bounceRate_DESC";

export type gcAccountDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC";

export type gcCollabDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumGroups_ASC"
  | "totalNumGroups_DESC"
  | "numNewGroups_ASC"
  | "numNewGroups_DESC";

export type gcConnexDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumGroups_ASC"
  | "totalNumGroups_DESC"
  | "numNewGroups_ASC"
  | "numNewGroups_DESC";

export type gcMessageDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumChannelMessages_ASC"
  | "totalNumChannelMessages_DESC"
  | "numNewChannelMessages_ASC"
  | "numNewChannelMessages_DESC"
  | "totalNumPrivateGroupMessages_ASC"
  | "totalNumPrivateGroupMessages_DESC"
  | "numNewPrivateGroupMessages_ASC"
  | "numNewPrivateGroupMessages_DESC"
  | "totalNumDirectMessages_ASC"
  | "totalNumDirectMessages_DESC"
  | "numNewDirectMessages_ASC"
  | "numNewDirectMessages_DESC"
  | "totalNumFileUploads_ASC"
  | "totalNumFileUploads_DESC"
  | "numNewFileUploads_ASC"
  | "numNewFileUploads_DESC";

export type gcPediaDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumArticles_ASC"
  | "totalNumArticles_DESC"
  | "numNewArticles_ASC"
  | "numNewArticles_DESC"
  | "totalNumEdits_ASC"
  | "totalNumEdits_DESC"
  | "numNewEdits_ASC"
  | "numNewEdits_DESC";

export type gcWikiDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumArticles_ASC"
  | "totalNumArticles_DESC"
  | "numNewArticles_ASC"
  | "numNewArticles_DESC"
  | "totalNumEdits_ASC"
  | "totalNumEdits_DESC"
  | "numNewEdits_ASC"
  | "numNewEdits_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PeriodWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PeriodWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<String>;
  date_not?: Maybe<String>;
  date_in?: Maybe<String[] | String>;
  date_not_in?: Maybe<String[] | String>;
  date_lt?: Maybe<String>;
  date_lte?: Maybe<String>;
  date_gt?: Maybe<String>;
  date_gte?: Maybe<String>;
  date_contains?: Maybe<String>;
  date_not_contains?: Maybe<String>;
  date_starts_with?: Maybe<String>;
  date_not_starts_with?: Maybe<String>;
  date_ends_with?: Maybe<String>;
  date_not_ends_with?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataWhereInput>;
  gcCollab?: Maybe<gcCollabDataWhereInput>;
  gcConnex?: Maybe<gcConnexDataWhereInput>;
  gcMessage?: Maybe<gcMessageDataWhereInput>;
  gcPedia?: Maybe<gcPediaDataWhereInput>;
  gcWiki?: Maybe<gcWikiDataWhereInput>;
  AND?: Maybe<PeriodWhereInput[] | PeriodWhereInput>;
  OR?: Maybe<PeriodWhereInput[] | PeriodWhereInput>;
  NOT?: Maybe<PeriodWhereInput[] | PeriodWhereInput>;
}

export interface gcAccountDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  period?: Maybe<PeriodWhereInput>;
  totalNumAccounts?: Maybe<Int>;
  totalNumAccounts_not?: Maybe<Int>;
  totalNumAccounts_in?: Maybe<Int[] | Int>;
  totalNumAccounts_not_in?: Maybe<Int[] | Int>;
  totalNumAccounts_lt?: Maybe<Int>;
  totalNumAccounts_lte?: Maybe<Int>;
  totalNumAccounts_gt?: Maybe<Int>;
  totalNumAccounts_gte?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  numNewAccounts_not?: Maybe<Int>;
  numNewAccounts_in?: Maybe<Int[] | Int>;
  numNewAccounts_not_in?: Maybe<Int[] | Int>;
  numNewAccounts_lt?: Maybe<Int>;
  numNewAccounts_lte?: Maybe<Int>;
  numNewAccounts_gt?: Maybe<Int>;
  numNewAccounts_gte?: Maybe<Int>;
  AND?: Maybe<gcAccountDataWhereInput[] | gcAccountDataWhereInput>;
  OR?: Maybe<gcAccountDataWhereInput[] | gcAccountDataWhereInput>;
  NOT?: Maybe<gcAccountDataWhereInput[] | gcAccountDataWhereInput>;
}

export interface gcCollabDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  period?: Maybe<PeriodWhereInput>;
  totalNumAccounts?: Maybe<Int>;
  totalNumAccounts_not?: Maybe<Int>;
  totalNumAccounts_in?: Maybe<Int[] | Int>;
  totalNumAccounts_not_in?: Maybe<Int[] | Int>;
  totalNumAccounts_lt?: Maybe<Int>;
  totalNumAccounts_lte?: Maybe<Int>;
  totalNumAccounts_gt?: Maybe<Int>;
  totalNumAccounts_gte?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  numNewAccounts_not?: Maybe<Int>;
  numNewAccounts_in?: Maybe<Int[] | Int>;
  numNewAccounts_not_in?: Maybe<Int[] | Int>;
  numNewAccounts_lt?: Maybe<Int>;
  numNewAccounts_lte?: Maybe<Int>;
  numNewAccounts_gt?: Maybe<Int>;
  numNewAccounts_gte?: Maybe<Int>;
  gaStats?: Maybe<gaStatsWhereInput>;
  totalNumGroups?: Maybe<Int>;
  totalNumGroups_not?: Maybe<Int>;
  totalNumGroups_in?: Maybe<Int[] | Int>;
  totalNumGroups_not_in?: Maybe<Int[] | Int>;
  totalNumGroups_lt?: Maybe<Int>;
  totalNumGroups_lte?: Maybe<Int>;
  totalNumGroups_gt?: Maybe<Int>;
  totalNumGroups_gte?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
  numNewGroups_not?: Maybe<Int>;
  numNewGroups_in?: Maybe<Int[] | Int>;
  numNewGroups_not_in?: Maybe<Int[] | Int>;
  numNewGroups_lt?: Maybe<Int>;
  numNewGroups_lte?: Maybe<Int>;
  numNewGroups_gt?: Maybe<Int>;
  numNewGroups_gte?: Maybe<Int>;
  AND?: Maybe<gcCollabDataWhereInput[] | gcCollabDataWhereInput>;
  OR?: Maybe<gcCollabDataWhereInput[] | gcCollabDataWhereInput>;
  NOT?: Maybe<gcCollabDataWhereInput[] | gcCollabDataWhereInput>;
}

export interface gaStatsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  numSessions?: Maybe<Int>;
  numSessions_not?: Maybe<Int>;
  numSessions_in?: Maybe<Int[] | Int>;
  numSessions_not_in?: Maybe<Int[] | Int>;
  numSessions_lt?: Maybe<Int>;
  numSessions_lte?: Maybe<Int>;
  numSessions_gt?: Maybe<Int>;
  numSessions_gte?: Maybe<Int>;
  avgPageviewsPerSession?: Maybe<Float>;
  avgPageviewsPerSession_not?: Maybe<Float>;
  avgPageviewsPerSession_in?: Maybe<Float[] | Float>;
  avgPageviewsPerSession_not_in?: Maybe<Float[] | Float>;
  avgPageviewsPerSession_lt?: Maybe<Float>;
  avgPageviewsPerSession_lte?: Maybe<Float>;
  avgPageviewsPerSession_gt?: Maybe<Float>;
  avgPageviewsPerSession_gte?: Maybe<Float>;
  avgSessionDuration?: Maybe<Float>;
  avgSessionDuration_not?: Maybe<Float>;
  avgSessionDuration_in?: Maybe<Float[] | Float>;
  avgSessionDuration_not_in?: Maybe<Float[] | Float>;
  avgSessionDuration_lt?: Maybe<Float>;
  avgSessionDuration_lte?: Maybe<Float>;
  avgSessionDuration_gt?: Maybe<Float>;
  avgSessionDuration_gte?: Maybe<Float>;
  avgPageLoadTime?: Maybe<Float>;
  avgPageLoadTime_not?: Maybe<Float>;
  avgPageLoadTime_in?: Maybe<Float[] | Float>;
  avgPageLoadTime_not_in?: Maybe<Float[] | Float>;
  avgPageLoadTime_lt?: Maybe<Float>;
  avgPageLoadTime_lte?: Maybe<Float>;
  avgPageLoadTime_gt?: Maybe<Float>;
  avgPageLoadTime_gte?: Maybe<Float>;
  bounceRate?: Maybe<Float>;
  bounceRate_not?: Maybe<Float>;
  bounceRate_in?: Maybe<Float[] | Float>;
  bounceRate_not_in?: Maybe<Float[] | Float>;
  bounceRate_lt?: Maybe<Float>;
  bounceRate_lte?: Maybe<Float>;
  bounceRate_gt?: Maybe<Float>;
  bounceRate_gte?: Maybe<Float>;
  AND?: Maybe<gaStatsWhereInput[] | gaStatsWhereInput>;
  OR?: Maybe<gaStatsWhereInput[] | gaStatsWhereInput>;
  NOT?: Maybe<gaStatsWhereInput[] | gaStatsWhereInput>;
}

export interface gcConnexDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  period?: Maybe<PeriodWhereInput>;
  totalNumAccounts?: Maybe<Int>;
  totalNumAccounts_not?: Maybe<Int>;
  totalNumAccounts_in?: Maybe<Int[] | Int>;
  totalNumAccounts_not_in?: Maybe<Int[] | Int>;
  totalNumAccounts_lt?: Maybe<Int>;
  totalNumAccounts_lte?: Maybe<Int>;
  totalNumAccounts_gt?: Maybe<Int>;
  totalNumAccounts_gte?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  numNewAccounts_not?: Maybe<Int>;
  numNewAccounts_in?: Maybe<Int[] | Int>;
  numNewAccounts_not_in?: Maybe<Int[] | Int>;
  numNewAccounts_lt?: Maybe<Int>;
  numNewAccounts_lte?: Maybe<Int>;
  numNewAccounts_gt?: Maybe<Int>;
  numNewAccounts_gte?: Maybe<Int>;
  gaStats?: Maybe<gaStatsWhereInput>;
  totalNumGroups?: Maybe<Int>;
  totalNumGroups_not?: Maybe<Int>;
  totalNumGroups_in?: Maybe<Int[] | Int>;
  totalNumGroups_not_in?: Maybe<Int[] | Int>;
  totalNumGroups_lt?: Maybe<Int>;
  totalNumGroups_lte?: Maybe<Int>;
  totalNumGroups_gt?: Maybe<Int>;
  totalNumGroups_gte?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
  numNewGroups_not?: Maybe<Int>;
  numNewGroups_in?: Maybe<Int[] | Int>;
  numNewGroups_not_in?: Maybe<Int[] | Int>;
  numNewGroups_lt?: Maybe<Int>;
  numNewGroups_lte?: Maybe<Int>;
  numNewGroups_gt?: Maybe<Int>;
  numNewGroups_gte?: Maybe<Int>;
  AND?: Maybe<gcConnexDataWhereInput[] | gcConnexDataWhereInput>;
  OR?: Maybe<gcConnexDataWhereInput[] | gcConnexDataWhereInput>;
  NOT?: Maybe<gcConnexDataWhereInput[] | gcConnexDataWhereInput>;
}

export interface gcMessageDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  period?: Maybe<PeriodWhereInput>;
  totalNumAccounts?: Maybe<Int>;
  totalNumAccounts_not?: Maybe<Int>;
  totalNumAccounts_in?: Maybe<Int[] | Int>;
  totalNumAccounts_not_in?: Maybe<Int[] | Int>;
  totalNumAccounts_lt?: Maybe<Int>;
  totalNumAccounts_lte?: Maybe<Int>;
  totalNumAccounts_gt?: Maybe<Int>;
  totalNumAccounts_gte?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  numNewAccounts_not?: Maybe<Int>;
  numNewAccounts_in?: Maybe<Int[] | Int>;
  numNewAccounts_not_in?: Maybe<Int[] | Int>;
  numNewAccounts_lt?: Maybe<Int>;
  numNewAccounts_lte?: Maybe<Int>;
  numNewAccounts_gt?: Maybe<Int>;
  numNewAccounts_gte?: Maybe<Int>;
  totalNumChannelMessages?: Maybe<Int>;
  totalNumChannelMessages_not?: Maybe<Int>;
  totalNumChannelMessages_in?: Maybe<Int[] | Int>;
  totalNumChannelMessages_not_in?: Maybe<Int[] | Int>;
  totalNumChannelMessages_lt?: Maybe<Int>;
  totalNumChannelMessages_lte?: Maybe<Int>;
  totalNumChannelMessages_gt?: Maybe<Int>;
  totalNumChannelMessages_gte?: Maybe<Int>;
  numNewChannelMessages?: Maybe<Int>;
  numNewChannelMessages_not?: Maybe<Int>;
  numNewChannelMessages_in?: Maybe<Int[] | Int>;
  numNewChannelMessages_not_in?: Maybe<Int[] | Int>;
  numNewChannelMessages_lt?: Maybe<Int>;
  numNewChannelMessages_lte?: Maybe<Int>;
  numNewChannelMessages_gt?: Maybe<Int>;
  numNewChannelMessages_gte?: Maybe<Int>;
  totalNumPrivateGroupMessages?: Maybe<Int>;
  totalNumPrivateGroupMessages_not?: Maybe<Int>;
  totalNumPrivateGroupMessages_in?: Maybe<Int[] | Int>;
  totalNumPrivateGroupMessages_not_in?: Maybe<Int[] | Int>;
  totalNumPrivateGroupMessages_lt?: Maybe<Int>;
  totalNumPrivateGroupMessages_lte?: Maybe<Int>;
  totalNumPrivateGroupMessages_gt?: Maybe<Int>;
  totalNumPrivateGroupMessages_gte?: Maybe<Int>;
  numNewPrivateGroupMessages?: Maybe<Int>;
  numNewPrivateGroupMessages_not?: Maybe<Int>;
  numNewPrivateGroupMessages_in?: Maybe<Int[] | Int>;
  numNewPrivateGroupMessages_not_in?: Maybe<Int[] | Int>;
  numNewPrivateGroupMessages_lt?: Maybe<Int>;
  numNewPrivateGroupMessages_lte?: Maybe<Int>;
  numNewPrivateGroupMessages_gt?: Maybe<Int>;
  numNewPrivateGroupMessages_gte?: Maybe<Int>;
  totalNumDirectMessages?: Maybe<Int>;
  totalNumDirectMessages_not?: Maybe<Int>;
  totalNumDirectMessages_in?: Maybe<Int[] | Int>;
  totalNumDirectMessages_not_in?: Maybe<Int[] | Int>;
  totalNumDirectMessages_lt?: Maybe<Int>;
  totalNumDirectMessages_lte?: Maybe<Int>;
  totalNumDirectMessages_gt?: Maybe<Int>;
  totalNumDirectMessages_gte?: Maybe<Int>;
  numNewDirectMessages?: Maybe<Int>;
  numNewDirectMessages_not?: Maybe<Int>;
  numNewDirectMessages_in?: Maybe<Int[] | Int>;
  numNewDirectMessages_not_in?: Maybe<Int[] | Int>;
  numNewDirectMessages_lt?: Maybe<Int>;
  numNewDirectMessages_lte?: Maybe<Int>;
  numNewDirectMessages_gt?: Maybe<Int>;
  numNewDirectMessages_gte?: Maybe<Int>;
  totalNumFileUploads?: Maybe<Int>;
  totalNumFileUploads_not?: Maybe<Int>;
  totalNumFileUploads_in?: Maybe<Int[] | Int>;
  totalNumFileUploads_not_in?: Maybe<Int[] | Int>;
  totalNumFileUploads_lt?: Maybe<Int>;
  totalNumFileUploads_lte?: Maybe<Int>;
  totalNumFileUploads_gt?: Maybe<Int>;
  totalNumFileUploads_gte?: Maybe<Int>;
  numNewFileUploads?: Maybe<Int>;
  numNewFileUploads_not?: Maybe<Int>;
  numNewFileUploads_in?: Maybe<Int[] | Int>;
  numNewFileUploads_not_in?: Maybe<Int[] | Int>;
  numNewFileUploads_lt?: Maybe<Int>;
  numNewFileUploads_lte?: Maybe<Int>;
  numNewFileUploads_gt?: Maybe<Int>;
  numNewFileUploads_gte?: Maybe<Int>;
  AND?: Maybe<gcMessageDataWhereInput[] | gcMessageDataWhereInput>;
  OR?: Maybe<gcMessageDataWhereInput[] | gcMessageDataWhereInput>;
  NOT?: Maybe<gcMessageDataWhereInput[] | gcMessageDataWhereInput>;
}

export interface gcPediaDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  period?: Maybe<PeriodWhereInput>;
  totalNumAccounts?: Maybe<Int>;
  totalNumAccounts_not?: Maybe<Int>;
  totalNumAccounts_in?: Maybe<Int[] | Int>;
  totalNumAccounts_not_in?: Maybe<Int[] | Int>;
  totalNumAccounts_lt?: Maybe<Int>;
  totalNumAccounts_lte?: Maybe<Int>;
  totalNumAccounts_gt?: Maybe<Int>;
  totalNumAccounts_gte?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  numNewAccounts_not?: Maybe<Int>;
  numNewAccounts_in?: Maybe<Int[] | Int>;
  numNewAccounts_not_in?: Maybe<Int[] | Int>;
  numNewAccounts_lt?: Maybe<Int>;
  numNewAccounts_lte?: Maybe<Int>;
  numNewAccounts_gt?: Maybe<Int>;
  numNewAccounts_gte?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  totalNumArticles_not?: Maybe<Int>;
  totalNumArticles_in?: Maybe<Int[] | Int>;
  totalNumArticles_not_in?: Maybe<Int[] | Int>;
  totalNumArticles_lt?: Maybe<Int>;
  totalNumArticles_lte?: Maybe<Int>;
  totalNumArticles_gt?: Maybe<Int>;
  totalNumArticles_gte?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  numNewArticles_not?: Maybe<Int>;
  numNewArticles_in?: Maybe<Int[] | Int>;
  numNewArticles_not_in?: Maybe<Int[] | Int>;
  numNewArticles_lt?: Maybe<Int>;
  numNewArticles_lte?: Maybe<Int>;
  numNewArticles_gt?: Maybe<Int>;
  numNewArticles_gte?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  totalNumEdits_not?: Maybe<Int>;
  totalNumEdits_in?: Maybe<Int[] | Int>;
  totalNumEdits_not_in?: Maybe<Int[] | Int>;
  totalNumEdits_lt?: Maybe<Int>;
  totalNumEdits_lte?: Maybe<Int>;
  totalNumEdits_gt?: Maybe<Int>;
  totalNumEdits_gte?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
  numNewEdits_not?: Maybe<Int>;
  numNewEdits_in?: Maybe<Int[] | Int>;
  numNewEdits_not_in?: Maybe<Int[] | Int>;
  numNewEdits_lt?: Maybe<Int>;
  numNewEdits_lte?: Maybe<Int>;
  numNewEdits_gt?: Maybe<Int>;
  numNewEdits_gte?: Maybe<Int>;
  AND?: Maybe<gcPediaDataWhereInput[] | gcPediaDataWhereInput>;
  OR?: Maybe<gcPediaDataWhereInput[] | gcPediaDataWhereInput>;
  NOT?: Maybe<gcPediaDataWhereInput[] | gcPediaDataWhereInput>;
}

export interface gcWikiDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  period?: Maybe<PeriodWhereInput>;
  totalNumAccounts?: Maybe<Int>;
  totalNumAccounts_not?: Maybe<Int>;
  totalNumAccounts_in?: Maybe<Int[] | Int>;
  totalNumAccounts_not_in?: Maybe<Int[] | Int>;
  totalNumAccounts_lt?: Maybe<Int>;
  totalNumAccounts_lte?: Maybe<Int>;
  totalNumAccounts_gt?: Maybe<Int>;
  totalNumAccounts_gte?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  numNewAccounts_not?: Maybe<Int>;
  numNewAccounts_in?: Maybe<Int[] | Int>;
  numNewAccounts_not_in?: Maybe<Int[] | Int>;
  numNewAccounts_lt?: Maybe<Int>;
  numNewAccounts_lte?: Maybe<Int>;
  numNewAccounts_gt?: Maybe<Int>;
  numNewAccounts_gte?: Maybe<Int>;
  gaStats?: Maybe<gaStatsWhereInput>;
  totalNumArticles?: Maybe<Int>;
  totalNumArticles_not?: Maybe<Int>;
  totalNumArticles_in?: Maybe<Int[] | Int>;
  totalNumArticles_not_in?: Maybe<Int[] | Int>;
  totalNumArticles_lt?: Maybe<Int>;
  totalNumArticles_lte?: Maybe<Int>;
  totalNumArticles_gt?: Maybe<Int>;
  totalNumArticles_gte?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  numNewArticles_not?: Maybe<Int>;
  numNewArticles_in?: Maybe<Int[] | Int>;
  numNewArticles_not_in?: Maybe<Int[] | Int>;
  numNewArticles_lt?: Maybe<Int>;
  numNewArticles_lte?: Maybe<Int>;
  numNewArticles_gt?: Maybe<Int>;
  numNewArticles_gte?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  totalNumEdits_not?: Maybe<Int>;
  totalNumEdits_in?: Maybe<Int[] | Int>;
  totalNumEdits_not_in?: Maybe<Int[] | Int>;
  totalNumEdits_lt?: Maybe<Int>;
  totalNumEdits_lte?: Maybe<Int>;
  totalNumEdits_gt?: Maybe<Int>;
  totalNumEdits_gte?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
  numNewEdits_not?: Maybe<Int>;
  numNewEdits_in?: Maybe<Int[] | Int>;
  numNewEdits_not_in?: Maybe<Int[] | Int>;
  numNewEdits_lt?: Maybe<Int>;
  numNewEdits_lte?: Maybe<Int>;
  numNewEdits_gt?: Maybe<Int>;
  numNewEdits_gte?: Maybe<Int>;
  AND?: Maybe<gcWikiDataWhereInput[] | gcWikiDataWhereInput>;
  OR?: Maybe<gcWikiDataWhereInput[] | gcWikiDataWhereInput>;
  NOT?: Maybe<gcWikiDataWhereInput[] | gcWikiDataWhereInput>;
}

export type gaStatsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type gcAccountDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type gcCollabDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type gcConnexDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type gcMessageDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type gcPediaDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type gcWikiDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PeriodCreateInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcAccount?: Maybe<gcAccountDataCreateOneWithoutPeriodInput>;
  gcCollab: gcCollabDataCreateOneWithoutPeriodInput;
  gcConnex: gcConnexDataCreateOneWithoutPeriodInput;
  gcMessage: gcMessageDataCreateOneWithoutPeriodInput;
  gcPedia: gcPediaDataCreateOneWithoutPeriodInput;
  gcWiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcAccountDataCreateOneWithoutPeriodInput {
  create?: Maybe<gcAccountDataCreateWithoutPeriodInput>;
  connect?: Maybe<gcAccountDataWhereUniqueInput>;
}

export interface gcAccountDataCreateWithoutPeriodInput {
  id?: Maybe<ID_Input>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
}

export interface gcCollabDataCreateOneWithoutPeriodInput {
  create?: Maybe<gcCollabDataCreateWithoutPeriodInput>;
  connect?: Maybe<gcCollabDataWhereUniqueInput>;
}

export interface gcCollabDataCreateWithoutPeriodInput {
  id?: Maybe<ID_Input>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsCreateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface gaStatsCreateOneInput {
  create?: Maybe<gaStatsCreateInput>;
  connect?: Maybe<gaStatsWhereUniqueInput>;
}

export interface gaStatsCreateInput {
  id?: Maybe<ID_Input>;
  numSessions?: Maybe<Int>;
  avgPageviewsPerSession?: Maybe<Float>;
  avgSessionDuration?: Maybe<Float>;
  avgPageLoadTime?: Maybe<Float>;
  bounceRate?: Maybe<Float>;
}

export interface gcConnexDataCreateOneWithoutPeriodInput {
  create?: Maybe<gcConnexDataCreateWithoutPeriodInput>;
  connect?: Maybe<gcConnexDataWhereUniqueInput>;
}

export interface gcConnexDataCreateWithoutPeriodInput {
  id?: Maybe<ID_Input>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsCreateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface gcMessageDataCreateOneWithoutPeriodInput {
  create?: Maybe<gcMessageDataCreateWithoutPeriodInput>;
  connect?: Maybe<gcMessageDataWhereUniqueInput>;
}

export interface gcMessageDataCreateWithoutPeriodInput {
  id?: Maybe<ID_Input>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumChannelMessages?: Maybe<Int>;
  numNewChannelMessages?: Maybe<Int>;
  totalNumPrivateGroupMessages?: Maybe<Int>;
  numNewPrivateGroupMessages?: Maybe<Int>;
  totalNumDirectMessages?: Maybe<Int>;
  numNewDirectMessages?: Maybe<Int>;
  totalNumFileUploads?: Maybe<Int>;
  numNewFileUploads?: Maybe<Int>;
}

export interface gcPediaDataCreateOneWithoutPeriodInput {
  create?: Maybe<gcPediaDataCreateWithoutPeriodInput>;
  connect?: Maybe<gcPediaDataWhereUniqueInput>;
}

export interface gcPediaDataCreateWithoutPeriodInput {
  id?: Maybe<ID_Input>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface gcWikiDataCreateOneWithoutPeriodInput {
  create?: Maybe<gcWikiDataCreateWithoutPeriodInput>;
  connect?: Maybe<gcWikiDataWhereUniqueInput>;
}

export interface gcWikiDataCreateWithoutPeriodInput {
  id?: Maybe<ID_Input>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsCreateOneInput>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface PeriodUpdateInput {
  date?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataUpdateOneWithoutPeriodInput>;
  gcCollab?: Maybe<gcCollabDataUpdateOneRequiredWithoutPeriodInput>;
  gcConnex?: Maybe<gcConnexDataUpdateOneRequiredWithoutPeriodInput>;
  gcMessage?: Maybe<gcMessageDataUpdateOneRequiredWithoutPeriodInput>;
  gcPedia?: Maybe<gcPediaDataUpdateOneRequiredWithoutPeriodInput>;
  gcWiki?: Maybe<gcWikiDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface gcAccountDataUpdateOneWithoutPeriodInput {
  create?: Maybe<gcAccountDataCreateWithoutPeriodInput>;
  update?: Maybe<gcAccountDataUpdateWithoutPeriodDataInput>;
  upsert?: Maybe<gcAccountDataUpsertWithoutPeriodInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<gcAccountDataWhereUniqueInput>;
}

export interface gcAccountDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
}

export interface gcAccountDataUpsertWithoutPeriodInput {
  update: gcAccountDataUpdateWithoutPeriodDataInput;
  create: gcAccountDataCreateWithoutPeriodInput;
}

export interface gcCollabDataUpdateOneRequiredWithoutPeriodInput {
  create?: Maybe<gcCollabDataCreateWithoutPeriodInput>;
  update?: Maybe<gcCollabDataUpdateWithoutPeriodDataInput>;
  upsert?: Maybe<gcCollabDataUpsertWithoutPeriodInput>;
  connect?: Maybe<gcCollabDataWhereUniqueInput>;
}

export interface gcCollabDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsUpdateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface gaStatsUpdateOneInput {
  create?: Maybe<gaStatsCreateInput>;
  update?: Maybe<gaStatsUpdateDataInput>;
  upsert?: Maybe<gaStatsUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<gaStatsWhereUniqueInput>;
}

export interface gaStatsUpdateDataInput {
  numSessions?: Maybe<Int>;
  avgPageviewsPerSession?: Maybe<Float>;
  avgSessionDuration?: Maybe<Float>;
  avgPageLoadTime?: Maybe<Float>;
  bounceRate?: Maybe<Float>;
}

export interface gaStatsUpsertNestedInput {
  update: gaStatsUpdateDataInput;
  create: gaStatsCreateInput;
}

export interface gcCollabDataUpsertWithoutPeriodInput {
  update: gcCollabDataUpdateWithoutPeriodDataInput;
  create: gcCollabDataCreateWithoutPeriodInput;
}

export interface gcConnexDataUpdateOneRequiredWithoutPeriodInput {
  create?: Maybe<gcConnexDataCreateWithoutPeriodInput>;
  update?: Maybe<gcConnexDataUpdateWithoutPeriodDataInput>;
  upsert?: Maybe<gcConnexDataUpsertWithoutPeriodInput>;
  connect?: Maybe<gcConnexDataWhereUniqueInput>;
}

export interface gcConnexDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsUpdateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface gcConnexDataUpsertWithoutPeriodInput {
  update: gcConnexDataUpdateWithoutPeriodDataInput;
  create: gcConnexDataCreateWithoutPeriodInput;
}

export interface gcMessageDataUpdateOneRequiredWithoutPeriodInput {
  create?: Maybe<gcMessageDataCreateWithoutPeriodInput>;
  update?: Maybe<gcMessageDataUpdateWithoutPeriodDataInput>;
  upsert?: Maybe<gcMessageDataUpsertWithoutPeriodInput>;
  connect?: Maybe<gcMessageDataWhereUniqueInput>;
}

export interface gcMessageDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumChannelMessages?: Maybe<Int>;
  numNewChannelMessages?: Maybe<Int>;
  totalNumPrivateGroupMessages?: Maybe<Int>;
  numNewPrivateGroupMessages?: Maybe<Int>;
  totalNumDirectMessages?: Maybe<Int>;
  numNewDirectMessages?: Maybe<Int>;
  totalNumFileUploads?: Maybe<Int>;
  numNewFileUploads?: Maybe<Int>;
}

export interface gcMessageDataUpsertWithoutPeriodInput {
  update: gcMessageDataUpdateWithoutPeriodDataInput;
  create: gcMessageDataCreateWithoutPeriodInput;
}

export interface gcPediaDataUpdateOneRequiredWithoutPeriodInput {
  create?: Maybe<gcPediaDataCreateWithoutPeriodInput>;
  update?: Maybe<gcPediaDataUpdateWithoutPeriodDataInput>;
  upsert?: Maybe<gcPediaDataUpsertWithoutPeriodInput>;
  connect?: Maybe<gcPediaDataWhereUniqueInput>;
}

export interface gcPediaDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface gcPediaDataUpsertWithoutPeriodInput {
  update: gcPediaDataUpdateWithoutPeriodDataInput;
  create: gcPediaDataCreateWithoutPeriodInput;
}

export interface gcWikiDataUpdateOneRequiredWithoutPeriodInput {
  create?: Maybe<gcWikiDataCreateWithoutPeriodInput>;
  update?: Maybe<gcWikiDataUpdateWithoutPeriodDataInput>;
  upsert?: Maybe<gcWikiDataUpsertWithoutPeriodInput>;
  connect?: Maybe<gcWikiDataWhereUniqueInput>;
}

export interface gcWikiDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsUpdateOneInput>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface gcWikiDataUpsertWithoutPeriodInput {
  update: gcWikiDataUpdateWithoutPeriodDataInput;
  create: gcWikiDataCreateWithoutPeriodInput;
}

export interface PeriodUpdateManyMutationInput {
  date?: Maybe<String>;
}

export interface gaStatsUpdateInput {
  numSessions?: Maybe<Int>;
  avgPageviewsPerSession?: Maybe<Float>;
  avgSessionDuration?: Maybe<Float>;
  avgPageLoadTime?: Maybe<Float>;
  bounceRate?: Maybe<Float>;
}

export interface gaStatsUpdateManyMutationInput {
  numSessions?: Maybe<Int>;
  avgPageviewsPerSession?: Maybe<Float>;
  avgSessionDuration?: Maybe<Float>;
  avgPageLoadTime?: Maybe<Float>;
  bounceRate?: Maybe<Float>;
}

export interface gcAccountDataCreateInput {
  id?: Maybe<ID_Input>;
  period: PeriodCreateOneWithoutGcAccountInput;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
}

export interface PeriodCreateOneWithoutGcAccountInput {
  create?: Maybe<PeriodCreateWithoutGcAccountInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodCreateWithoutGcAccountInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcCollab: gcCollabDataCreateOneWithoutPeriodInput;
  gcConnex: gcConnexDataCreateOneWithoutPeriodInput;
  gcMessage: gcMessageDataCreateOneWithoutPeriodInput;
  gcPedia: gcPediaDataCreateOneWithoutPeriodInput;
  gcWiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcAccountDataUpdateInput {
  period?: Maybe<PeriodUpdateOneRequiredWithoutGcAccountInput>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
}

export interface PeriodUpdateOneRequiredWithoutGcAccountInput {
  create?: Maybe<PeriodCreateWithoutGcAccountInput>;
  update?: Maybe<PeriodUpdateWithoutGcAccountDataInput>;
  upsert?: Maybe<PeriodUpsertWithoutGcAccountInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodUpdateWithoutGcAccountDataInput {
  date?: Maybe<String>;
  gcCollab?: Maybe<gcCollabDataUpdateOneRequiredWithoutPeriodInput>;
  gcConnex?: Maybe<gcConnexDataUpdateOneRequiredWithoutPeriodInput>;
  gcMessage?: Maybe<gcMessageDataUpdateOneRequiredWithoutPeriodInput>;
  gcPedia?: Maybe<gcPediaDataUpdateOneRequiredWithoutPeriodInput>;
  gcWiki?: Maybe<gcWikiDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface PeriodUpsertWithoutGcAccountInput {
  update: PeriodUpdateWithoutGcAccountDataInput;
  create: PeriodCreateWithoutGcAccountInput;
}

export interface gcAccountDataUpdateManyMutationInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
}

export interface gcCollabDataCreateInput {
  id?: Maybe<ID_Input>;
  period: PeriodCreateOneWithoutGcCollabInput;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsCreateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface PeriodCreateOneWithoutGcCollabInput {
  create?: Maybe<PeriodCreateWithoutGcCollabInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodCreateWithoutGcCollabInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcAccount?: Maybe<gcAccountDataCreateOneWithoutPeriodInput>;
  gcConnex: gcConnexDataCreateOneWithoutPeriodInput;
  gcMessage: gcMessageDataCreateOneWithoutPeriodInput;
  gcPedia: gcPediaDataCreateOneWithoutPeriodInput;
  gcWiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcCollabDataUpdateInput {
  period?: Maybe<PeriodUpdateOneRequiredWithoutGcCollabInput>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsUpdateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface PeriodUpdateOneRequiredWithoutGcCollabInput {
  create?: Maybe<PeriodCreateWithoutGcCollabInput>;
  update?: Maybe<PeriodUpdateWithoutGcCollabDataInput>;
  upsert?: Maybe<PeriodUpsertWithoutGcCollabInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodUpdateWithoutGcCollabDataInput {
  date?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataUpdateOneWithoutPeriodInput>;
  gcConnex?: Maybe<gcConnexDataUpdateOneRequiredWithoutPeriodInput>;
  gcMessage?: Maybe<gcMessageDataUpdateOneRequiredWithoutPeriodInput>;
  gcPedia?: Maybe<gcPediaDataUpdateOneRequiredWithoutPeriodInput>;
  gcWiki?: Maybe<gcWikiDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface PeriodUpsertWithoutGcCollabInput {
  update: PeriodUpdateWithoutGcCollabDataInput;
  create: PeriodCreateWithoutGcCollabInput;
}

export interface gcCollabDataUpdateManyMutationInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface gcConnexDataCreateInput {
  id?: Maybe<ID_Input>;
  period: PeriodCreateOneWithoutGcConnexInput;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsCreateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface PeriodCreateOneWithoutGcConnexInput {
  create?: Maybe<PeriodCreateWithoutGcConnexInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodCreateWithoutGcConnexInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcAccount?: Maybe<gcAccountDataCreateOneWithoutPeriodInput>;
  gcCollab: gcCollabDataCreateOneWithoutPeriodInput;
  gcMessage: gcMessageDataCreateOneWithoutPeriodInput;
  gcPedia: gcPediaDataCreateOneWithoutPeriodInput;
  gcWiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcConnexDataUpdateInput {
  period?: Maybe<PeriodUpdateOneRequiredWithoutGcConnexInput>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsUpdateOneInput>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface PeriodUpdateOneRequiredWithoutGcConnexInput {
  create?: Maybe<PeriodCreateWithoutGcConnexInput>;
  update?: Maybe<PeriodUpdateWithoutGcConnexDataInput>;
  upsert?: Maybe<PeriodUpsertWithoutGcConnexInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodUpdateWithoutGcConnexDataInput {
  date?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataUpdateOneWithoutPeriodInput>;
  gcCollab?: Maybe<gcCollabDataUpdateOneRequiredWithoutPeriodInput>;
  gcMessage?: Maybe<gcMessageDataUpdateOneRequiredWithoutPeriodInput>;
  gcPedia?: Maybe<gcPediaDataUpdateOneRequiredWithoutPeriodInput>;
  gcWiki?: Maybe<gcWikiDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface PeriodUpsertWithoutGcConnexInput {
  update: PeriodUpdateWithoutGcConnexDataInput;
  create: PeriodCreateWithoutGcConnexInput;
}

export interface gcConnexDataUpdateManyMutationInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumGroups?: Maybe<Int>;
  numNewGroups?: Maybe<Int>;
}

export interface gcMessageDataCreateInput {
  id?: Maybe<ID_Input>;
  period: PeriodCreateOneWithoutGcMessageInput;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumChannelMessages?: Maybe<Int>;
  numNewChannelMessages?: Maybe<Int>;
  totalNumPrivateGroupMessages?: Maybe<Int>;
  numNewPrivateGroupMessages?: Maybe<Int>;
  totalNumDirectMessages?: Maybe<Int>;
  numNewDirectMessages?: Maybe<Int>;
  totalNumFileUploads?: Maybe<Int>;
  numNewFileUploads?: Maybe<Int>;
}

export interface PeriodCreateOneWithoutGcMessageInput {
  create?: Maybe<PeriodCreateWithoutGcMessageInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodCreateWithoutGcMessageInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcAccount?: Maybe<gcAccountDataCreateOneWithoutPeriodInput>;
  gcCollab: gcCollabDataCreateOneWithoutPeriodInput;
  gcConnex: gcConnexDataCreateOneWithoutPeriodInput;
  gcPedia: gcPediaDataCreateOneWithoutPeriodInput;
  gcWiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcMessageDataUpdateInput {
  period?: Maybe<PeriodUpdateOneRequiredWithoutGcMessageInput>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumChannelMessages?: Maybe<Int>;
  numNewChannelMessages?: Maybe<Int>;
  totalNumPrivateGroupMessages?: Maybe<Int>;
  numNewPrivateGroupMessages?: Maybe<Int>;
  totalNumDirectMessages?: Maybe<Int>;
  numNewDirectMessages?: Maybe<Int>;
  totalNumFileUploads?: Maybe<Int>;
  numNewFileUploads?: Maybe<Int>;
}

export interface PeriodUpdateOneRequiredWithoutGcMessageInput {
  create?: Maybe<PeriodCreateWithoutGcMessageInput>;
  update?: Maybe<PeriodUpdateWithoutGcMessageDataInput>;
  upsert?: Maybe<PeriodUpsertWithoutGcMessageInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodUpdateWithoutGcMessageDataInput {
  date?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataUpdateOneWithoutPeriodInput>;
  gcCollab?: Maybe<gcCollabDataUpdateOneRequiredWithoutPeriodInput>;
  gcConnex?: Maybe<gcConnexDataUpdateOneRequiredWithoutPeriodInput>;
  gcPedia?: Maybe<gcPediaDataUpdateOneRequiredWithoutPeriodInput>;
  gcWiki?: Maybe<gcWikiDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface PeriodUpsertWithoutGcMessageInput {
  update: PeriodUpdateWithoutGcMessageDataInput;
  create: PeriodCreateWithoutGcMessageInput;
}

export interface gcMessageDataUpdateManyMutationInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumChannelMessages?: Maybe<Int>;
  numNewChannelMessages?: Maybe<Int>;
  totalNumPrivateGroupMessages?: Maybe<Int>;
  numNewPrivateGroupMessages?: Maybe<Int>;
  totalNumDirectMessages?: Maybe<Int>;
  numNewDirectMessages?: Maybe<Int>;
  totalNumFileUploads?: Maybe<Int>;
  numNewFileUploads?: Maybe<Int>;
}

export interface gcPediaDataCreateInput {
  id?: Maybe<ID_Input>;
  period: PeriodCreateOneWithoutGcPediaInput;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface PeriodCreateOneWithoutGcPediaInput {
  create?: Maybe<PeriodCreateWithoutGcPediaInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodCreateWithoutGcPediaInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcAccount?: Maybe<gcAccountDataCreateOneWithoutPeriodInput>;
  gcCollab: gcCollabDataCreateOneWithoutPeriodInput;
  gcConnex: gcConnexDataCreateOneWithoutPeriodInput;
  gcMessage: gcMessageDataCreateOneWithoutPeriodInput;
  gcWiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcPediaDataUpdateInput {
  period?: Maybe<PeriodUpdateOneRequiredWithoutGcPediaInput>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface PeriodUpdateOneRequiredWithoutGcPediaInput {
  create?: Maybe<PeriodCreateWithoutGcPediaInput>;
  update?: Maybe<PeriodUpdateWithoutGcPediaDataInput>;
  upsert?: Maybe<PeriodUpsertWithoutGcPediaInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodUpdateWithoutGcPediaDataInput {
  date?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataUpdateOneWithoutPeriodInput>;
  gcCollab?: Maybe<gcCollabDataUpdateOneRequiredWithoutPeriodInput>;
  gcConnex?: Maybe<gcConnexDataUpdateOneRequiredWithoutPeriodInput>;
  gcMessage?: Maybe<gcMessageDataUpdateOneRequiredWithoutPeriodInput>;
  gcWiki?: Maybe<gcWikiDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface PeriodUpsertWithoutGcPediaInput {
  update: PeriodUpdateWithoutGcPediaDataInput;
  create: PeriodCreateWithoutGcPediaInput;
}

export interface gcPediaDataUpdateManyMutationInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface gcWikiDataCreateInput {
  id?: Maybe<ID_Input>;
  period: PeriodCreateOneWithoutGcWikiInput;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsCreateOneInput>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface PeriodCreateOneWithoutGcWikiInput {
  create?: Maybe<PeriodCreateWithoutGcWikiInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodCreateWithoutGcWikiInput {
  id?: Maybe<ID_Input>;
  date: String;
  gcAccount?: Maybe<gcAccountDataCreateOneWithoutPeriodInput>;
  gcCollab: gcCollabDataCreateOneWithoutPeriodInput;
  gcConnex: gcConnexDataCreateOneWithoutPeriodInput;
  gcMessage: gcMessageDataCreateOneWithoutPeriodInput;
  gcPedia: gcPediaDataCreateOneWithoutPeriodInput;
}

export interface gcWikiDataUpdateInput {
  period?: Maybe<PeriodUpdateOneRequiredWithoutGcWikiInput>;
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  gaStats?: Maybe<gaStatsUpdateOneInput>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface PeriodUpdateOneRequiredWithoutGcWikiInput {
  create?: Maybe<PeriodCreateWithoutGcWikiInput>;
  update?: Maybe<PeriodUpdateWithoutGcWikiDataInput>;
  upsert?: Maybe<PeriodUpsertWithoutGcWikiInput>;
  connect?: Maybe<PeriodWhereUniqueInput>;
}

export interface PeriodUpdateWithoutGcWikiDataInput {
  date?: Maybe<String>;
  gcAccount?: Maybe<gcAccountDataUpdateOneWithoutPeriodInput>;
  gcCollab?: Maybe<gcCollabDataUpdateOneRequiredWithoutPeriodInput>;
  gcConnex?: Maybe<gcConnexDataUpdateOneRequiredWithoutPeriodInput>;
  gcMessage?: Maybe<gcMessageDataUpdateOneRequiredWithoutPeriodInput>;
  gcPedia?: Maybe<gcPediaDataUpdateOneRequiredWithoutPeriodInput>;
}

export interface PeriodUpsertWithoutGcWikiInput {
  update: PeriodUpdateWithoutGcWikiDataInput;
  create: PeriodCreateWithoutGcWikiInput;
}

export interface gcWikiDataUpdateManyMutationInput {
  totalNumAccounts?: Maybe<Int>;
  numNewAccounts?: Maybe<Int>;
  totalNumArticles?: Maybe<Int>;
  numNewArticles?: Maybe<Int>;
  totalNumEdits?: Maybe<Int>;
  numNewEdits?: Maybe<Int>;
}

export interface PeriodSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PeriodWhereInput>;
  AND?: Maybe<PeriodSubscriptionWhereInput[] | PeriodSubscriptionWhereInput>;
  OR?: Maybe<PeriodSubscriptionWhereInput[] | PeriodSubscriptionWhereInput>;
  NOT?: Maybe<PeriodSubscriptionWhereInput[] | PeriodSubscriptionWhereInput>;
}

export interface gaStatsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gaStatsWhereInput>;
  AND?: Maybe<gaStatsSubscriptionWhereInput[] | gaStatsSubscriptionWhereInput>;
  OR?: Maybe<gaStatsSubscriptionWhereInput[] | gaStatsSubscriptionWhereInput>;
  NOT?: Maybe<gaStatsSubscriptionWhereInput[] | gaStatsSubscriptionWhereInput>;
}

export interface gcAccountDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gcAccountDataWhereInput>;
  AND?: Maybe<
    gcAccountDataSubscriptionWhereInput[] | gcAccountDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    gcAccountDataSubscriptionWhereInput[] | gcAccountDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    gcAccountDataSubscriptionWhereInput[] | gcAccountDataSubscriptionWhereInput
  >;
}

export interface gcCollabDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gcCollabDataWhereInput>;
  AND?: Maybe<
    gcCollabDataSubscriptionWhereInput[] | gcCollabDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    gcCollabDataSubscriptionWhereInput[] | gcCollabDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    gcCollabDataSubscriptionWhereInput[] | gcCollabDataSubscriptionWhereInput
  >;
}

export interface gcConnexDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gcConnexDataWhereInput>;
  AND?: Maybe<
    gcConnexDataSubscriptionWhereInput[] | gcConnexDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    gcConnexDataSubscriptionWhereInput[] | gcConnexDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    gcConnexDataSubscriptionWhereInput[] | gcConnexDataSubscriptionWhereInput
  >;
}

export interface gcMessageDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gcMessageDataWhereInput>;
  AND?: Maybe<
    gcMessageDataSubscriptionWhereInput[] | gcMessageDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    gcMessageDataSubscriptionWhereInput[] | gcMessageDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    gcMessageDataSubscriptionWhereInput[] | gcMessageDataSubscriptionWhereInput
  >;
}

export interface gcPediaDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gcPediaDataWhereInput>;
  AND?: Maybe<
    gcPediaDataSubscriptionWhereInput[] | gcPediaDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    gcPediaDataSubscriptionWhereInput[] | gcPediaDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    gcPediaDataSubscriptionWhereInput[] | gcPediaDataSubscriptionWhereInput
  >;
}

export interface gcWikiDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<gcWikiDataWhereInput>;
  AND?: Maybe<
    gcWikiDataSubscriptionWhereInput[] | gcWikiDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    gcWikiDataSubscriptionWhereInput[] | gcWikiDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    gcWikiDataSubscriptionWhereInput[] | gcWikiDataSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Period {
  id: ID_Output;
  date: String;
}

export interface PeriodPromise extends Promise<Period>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  gcAccount: <T = gcAccountDataPromise>() => T;
  gcCollab: <T = gcCollabDataPromise>() => T;
  gcConnex: <T = gcConnexDataPromise>() => T;
  gcMessage: <T = gcMessageDataPromise>() => T;
  gcPedia: <T = gcPediaDataPromise>() => T;
  gcWiki: <T = gcWikiDataPromise>() => T;
}

export interface PeriodSubscription
  extends Promise<AsyncIterator<Period>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
  gcAccount: <T = gcAccountDataSubscription>() => T;
  gcCollab: <T = gcCollabDataSubscription>() => T;
  gcConnex: <T = gcConnexDataSubscription>() => T;
  gcMessage: <T = gcMessageDataSubscription>() => T;
  gcPedia: <T = gcPediaDataSubscription>() => T;
  gcWiki: <T = gcWikiDataSubscription>() => T;
}

export interface PeriodNullablePromise
  extends Promise<Period | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
  gcAccount: <T = gcAccountDataPromise>() => T;
  gcCollab: <T = gcCollabDataPromise>() => T;
  gcConnex: <T = gcConnexDataPromise>() => T;
  gcMessage: <T = gcMessageDataPromise>() => T;
  gcPedia: <T = gcPediaDataPromise>() => T;
  gcWiki: <T = gcWikiDataPromise>() => T;
}

export interface gcAccountData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface gcAccountDataPromise
  extends Promise<gcAccountData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
}

export interface gcAccountDataSubscription
  extends Promise<AsyncIterator<gcAccountData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
}

export interface gcAccountDataNullablePromise
  extends Promise<gcAccountData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
}

export interface gcCollabData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
}

export interface gcCollabDataPromise
  extends Promise<gcCollabData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaStats: <T = gaStatsPromise>() => T;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
}

export interface gcCollabDataSubscription
  extends Promise<AsyncIterator<gcCollabData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  gaStats: <T = gaStatsSubscription>() => T;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
}

export interface gcCollabDataNullablePromise
  extends Promise<gcCollabData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaStats: <T = gaStatsPromise>() => T;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
}

export interface gaStats {
  id: ID_Output;
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface gaStatsPromise extends Promise<gaStats>, Fragmentable {
  id: () => Promise<ID_Output>;
  numSessions: () => Promise<Int>;
  avgPageviewsPerSession: () => Promise<Float>;
  avgSessionDuration: () => Promise<Float>;
  avgPageLoadTime: () => Promise<Float>;
  bounceRate: () => Promise<Float>;
}

export interface gaStatsSubscription
  extends Promise<AsyncIterator<gaStats>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  numSessions: () => Promise<AsyncIterator<Int>>;
  avgPageviewsPerSession: () => Promise<AsyncIterator<Float>>;
  avgSessionDuration: () => Promise<AsyncIterator<Float>>;
  avgPageLoadTime: () => Promise<AsyncIterator<Float>>;
  bounceRate: () => Promise<AsyncIterator<Float>>;
}

export interface gaStatsNullablePromise
  extends Promise<gaStats | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  numSessions: () => Promise<Int>;
  avgPageviewsPerSession: () => Promise<Float>;
  avgSessionDuration: () => Promise<Float>;
  avgPageLoadTime: () => Promise<Float>;
  bounceRate: () => Promise<Float>;
}

export interface gcConnexData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
}

export interface gcConnexDataPromise
  extends Promise<gcConnexData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaStats: <T = gaStatsPromise>() => T;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
}

export interface gcConnexDataSubscription
  extends Promise<AsyncIterator<gcConnexData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  gaStats: <T = gaStatsSubscription>() => T;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
}

export interface gcConnexDataNullablePromise
  extends Promise<gcConnexData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaStats: <T = gaStatsPromise>() => T;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
}

export interface gcMessageData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcMessageDataPromise
  extends Promise<gcMessageData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumChannelMessages: () => Promise<Int>;
  numNewChannelMessages: () => Promise<Int>;
  totalNumPrivateGroupMessages: () => Promise<Int>;
  numNewPrivateGroupMessages: () => Promise<Int>;
  totalNumDirectMessages: () => Promise<Int>;
  numNewDirectMessages: () => Promise<Int>;
  totalNumFileUploads: () => Promise<Int>;
  numNewFileUploads: () => Promise<Int>;
}

export interface gcMessageDataSubscription
  extends Promise<AsyncIterator<gcMessageData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumChannelMessages: () => Promise<AsyncIterator<Int>>;
  numNewChannelMessages: () => Promise<AsyncIterator<Int>>;
  totalNumPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  numNewPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  totalNumDirectMessages: () => Promise<AsyncIterator<Int>>;
  numNewDirectMessages: () => Promise<AsyncIterator<Int>>;
  totalNumFileUploads: () => Promise<AsyncIterator<Int>>;
  numNewFileUploads: () => Promise<AsyncIterator<Int>>;
}

export interface gcMessageDataNullablePromise
  extends Promise<gcMessageData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumChannelMessages: () => Promise<Int>;
  numNewChannelMessages: () => Promise<Int>;
  totalNumPrivateGroupMessages: () => Promise<Int>;
  numNewPrivateGroupMessages: () => Promise<Int>;
  totalNumDirectMessages: () => Promise<Int>;
  numNewDirectMessages: () => Promise<Int>;
  totalNumFileUploads: () => Promise<Int>;
  numNewFileUploads: () => Promise<Int>;
}

export interface gcPediaData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcPediaDataPromise extends Promise<gcPediaData>, Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcPediaDataSubscription
  extends Promise<AsyncIterator<gcPediaData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface gcPediaDataNullablePromise
  extends Promise<gcPediaData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcWikiData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataPromise extends Promise<gcWikiData>, Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaStats: <T = gaStatsPromise>() => T;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcWikiDataSubscription
  extends Promise<AsyncIterator<gcWikiData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  gaStats: <T = gaStatsSubscription>() => T;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface gcWikiDataNullablePromise
  extends Promise<gcWikiData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaStats: <T = gaStatsPromise>() => T;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface PeriodConnection {
  pageInfo: PageInfo;
  edges: PeriodEdge[];
}

export interface PeriodConnectionPromise
  extends Promise<PeriodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PeriodEdge>>() => T;
  aggregate: <T = AggregatePeriodPromise>() => T;
}

export interface PeriodConnectionSubscription
  extends Promise<AsyncIterator<PeriodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PeriodEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePeriodSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PeriodEdge {
  node: Period;
  cursor: String;
}

export interface PeriodEdgePromise extends Promise<PeriodEdge>, Fragmentable {
  node: <T = PeriodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PeriodEdgeSubscription
  extends Promise<AsyncIterator<PeriodEdge>>,
    Fragmentable {
  node: <T = PeriodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePeriod {
  count: Int;
}

export interface AggregatePeriodPromise
  extends Promise<AggregatePeriod>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePeriodSubscription
  extends Promise<AsyncIterator<AggregatePeriod>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gaStatsConnection {
  pageInfo: PageInfo;
  edges: gaStatsEdge[];
}

export interface gaStatsConnectionPromise
  extends Promise<gaStatsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gaStatsEdge>>() => T;
  aggregate: <T = AggregategaStatsPromise>() => T;
}

export interface gaStatsConnectionSubscription
  extends Promise<AsyncIterator<gaStatsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gaStatsEdgeSubscription>>>() => T;
  aggregate: <T = AggregategaStatsSubscription>() => T;
}

export interface gaStatsEdge {
  node: gaStats;
  cursor: String;
}

export interface gaStatsEdgePromise extends Promise<gaStatsEdge>, Fragmentable {
  node: <T = gaStatsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gaStatsEdgeSubscription
  extends Promise<AsyncIterator<gaStatsEdge>>,
    Fragmentable {
  node: <T = gaStatsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategaStats {
  count: Int;
}

export interface AggregategaStatsPromise
  extends Promise<AggregategaStats>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategaStatsSubscription
  extends Promise<AsyncIterator<AggregategaStats>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcAccountDataConnection {
  pageInfo: PageInfo;
  edges: gcAccountDataEdge[];
}

export interface gcAccountDataConnectionPromise
  extends Promise<gcAccountDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcAccountDataEdge>>() => T;
  aggregate: <T = AggregategcAccountDataPromise>() => T;
}

export interface gcAccountDataConnectionSubscription
  extends Promise<AsyncIterator<gcAccountDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcAccountDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcAccountDataSubscription>() => T;
}

export interface gcAccountDataEdge {
  node: gcAccountData;
  cursor: String;
}

export interface gcAccountDataEdgePromise
  extends Promise<gcAccountDataEdge>,
    Fragmentable {
  node: <T = gcAccountDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcAccountDataEdgeSubscription
  extends Promise<AsyncIterator<gcAccountDataEdge>>,
    Fragmentable {
  node: <T = gcAccountDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategcAccountData {
  count: Int;
}

export interface AggregategcAccountDataPromise
  extends Promise<AggregategcAccountData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcAccountDataSubscription
  extends Promise<AsyncIterator<AggregategcAccountData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcCollabDataConnection {
  pageInfo: PageInfo;
  edges: gcCollabDataEdge[];
}

export interface gcCollabDataConnectionPromise
  extends Promise<gcCollabDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcCollabDataEdge>>() => T;
  aggregate: <T = AggregategcCollabDataPromise>() => T;
}

export interface gcCollabDataConnectionSubscription
  extends Promise<AsyncIterator<gcCollabDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcCollabDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcCollabDataSubscription>() => T;
}

export interface gcCollabDataEdge {
  node: gcCollabData;
  cursor: String;
}

export interface gcCollabDataEdgePromise
  extends Promise<gcCollabDataEdge>,
    Fragmentable {
  node: <T = gcCollabDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcCollabDataEdgeSubscription
  extends Promise<AsyncIterator<gcCollabDataEdge>>,
    Fragmentable {
  node: <T = gcCollabDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategcCollabData {
  count: Int;
}

export interface AggregategcCollabDataPromise
  extends Promise<AggregategcCollabData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcCollabDataSubscription
  extends Promise<AsyncIterator<AggregategcCollabData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcConnexDataConnection {
  pageInfo: PageInfo;
  edges: gcConnexDataEdge[];
}

export interface gcConnexDataConnectionPromise
  extends Promise<gcConnexDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcConnexDataEdge>>() => T;
  aggregate: <T = AggregategcConnexDataPromise>() => T;
}

export interface gcConnexDataConnectionSubscription
  extends Promise<AsyncIterator<gcConnexDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcConnexDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcConnexDataSubscription>() => T;
}

export interface gcConnexDataEdge {
  node: gcConnexData;
  cursor: String;
}

export interface gcConnexDataEdgePromise
  extends Promise<gcConnexDataEdge>,
    Fragmentable {
  node: <T = gcConnexDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcConnexDataEdgeSubscription
  extends Promise<AsyncIterator<gcConnexDataEdge>>,
    Fragmentable {
  node: <T = gcConnexDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategcConnexData {
  count: Int;
}

export interface AggregategcConnexDataPromise
  extends Promise<AggregategcConnexData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcConnexDataSubscription
  extends Promise<AsyncIterator<AggregategcConnexData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcMessageDataConnection {
  pageInfo: PageInfo;
  edges: gcMessageDataEdge[];
}

export interface gcMessageDataConnectionPromise
  extends Promise<gcMessageDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcMessageDataEdge>>() => T;
  aggregate: <T = AggregategcMessageDataPromise>() => T;
}

export interface gcMessageDataConnectionSubscription
  extends Promise<AsyncIterator<gcMessageDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcMessageDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcMessageDataSubscription>() => T;
}

export interface gcMessageDataEdge {
  node: gcMessageData;
  cursor: String;
}

export interface gcMessageDataEdgePromise
  extends Promise<gcMessageDataEdge>,
    Fragmentable {
  node: <T = gcMessageDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcMessageDataEdgeSubscription
  extends Promise<AsyncIterator<gcMessageDataEdge>>,
    Fragmentable {
  node: <T = gcMessageDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategcMessageData {
  count: Int;
}

export interface AggregategcMessageDataPromise
  extends Promise<AggregategcMessageData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcMessageDataSubscription
  extends Promise<AsyncIterator<AggregategcMessageData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcPediaDataConnection {
  pageInfo: PageInfo;
  edges: gcPediaDataEdge[];
}

export interface gcPediaDataConnectionPromise
  extends Promise<gcPediaDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcPediaDataEdge>>() => T;
  aggregate: <T = AggregategcPediaDataPromise>() => T;
}

export interface gcPediaDataConnectionSubscription
  extends Promise<AsyncIterator<gcPediaDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcPediaDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcPediaDataSubscription>() => T;
}

export interface gcPediaDataEdge {
  node: gcPediaData;
  cursor: String;
}

export interface gcPediaDataEdgePromise
  extends Promise<gcPediaDataEdge>,
    Fragmentable {
  node: <T = gcPediaDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcPediaDataEdgeSubscription
  extends Promise<AsyncIterator<gcPediaDataEdge>>,
    Fragmentable {
  node: <T = gcPediaDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategcPediaData {
  count: Int;
}

export interface AggregategcPediaDataPromise
  extends Promise<AggregategcPediaData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcPediaDataSubscription
  extends Promise<AsyncIterator<AggregategcPediaData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcWikiDataConnection {
  pageInfo: PageInfo;
  edges: gcWikiDataEdge[];
}

export interface gcWikiDataConnectionPromise
  extends Promise<gcWikiDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcWikiDataEdge>>() => T;
  aggregate: <T = AggregategcWikiDataPromise>() => T;
}

export interface gcWikiDataConnectionSubscription
  extends Promise<AsyncIterator<gcWikiDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcWikiDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcWikiDataSubscription>() => T;
}

export interface gcWikiDataEdge {
  node: gcWikiData;
  cursor: String;
}

export interface gcWikiDataEdgePromise
  extends Promise<gcWikiDataEdge>,
    Fragmentable {
  node: <T = gcWikiDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcWikiDataEdgeSubscription
  extends Promise<AsyncIterator<gcWikiDataEdge>>,
    Fragmentable {
  node: <T = gcWikiDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregategcWikiData {
  count: Int;
}

export interface AggregategcWikiDataPromise
  extends Promise<AggregategcWikiData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcWikiDataSubscription
  extends Promise<AsyncIterator<AggregategcWikiData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PeriodSubscriptionPayload {
  mutation: MutationType;
  node: Period;
  updatedFields: String[];
  previousValues: PeriodPreviousValues;
}

export interface PeriodSubscriptionPayloadPromise
  extends Promise<PeriodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PeriodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PeriodPreviousValuesPromise>() => T;
}

export interface PeriodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PeriodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PeriodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PeriodPreviousValuesSubscription>() => T;
}

export interface PeriodPreviousValues {
  id: ID_Output;
  date: String;
}

export interface PeriodPreviousValuesPromise
  extends Promise<PeriodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<String>;
}

export interface PeriodPreviousValuesSubscription
  extends Promise<AsyncIterator<PeriodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<String>>;
}

export interface gaStatsSubscriptionPayload {
  mutation: MutationType;
  node: gaStats;
  updatedFields: String[];
  previousValues: gaStatsPreviousValues;
}

export interface gaStatsSubscriptionPayloadPromise
  extends Promise<gaStatsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gaStatsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gaStatsPreviousValuesPromise>() => T;
}

export interface gaStatsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gaStatsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gaStatsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gaStatsPreviousValuesSubscription>() => T;
}

export interface gaStatsPreviousValues {
  id: ID_Output;
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface gaStatsPreviousValuesPromise
  extends Promise<gaStatsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  numSessions: () => Promise<Int>;
  avgPageviewsPerSession: () => Promise<Float>;
  avgSessionDuration: () => Promise<Float>;
  avgPageLoadTime: () => Promise<Float>;
  bounceRate: () => Promise<Float>;
}

export interface gaStatsPreviousValuesSubscription
  extends Promise<AsyncIterator<gaStatsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  numSessions: () => Promise<AsyncIterator<Int>>;
  avgPageviewsPerSession: () => Promise<AsyncIterator<Float>>;
  avgSessionDuration: () => Promise<AsyncIterator<Float>>;
  avgPageLoadTime: () => Promise<AsyncIterator<Float>>;
  bounceRate: () => Promise<AsyncIterator<Float>>;
}

export interface gcAccountDataSubscriptionPayload {
  mutation: MutationType;
  node: gcAccountData;
  updatedFields: String[];
  previousValues: gcAccountDataPreviousValues;
}

export interface gcAccountDataSubscriptionPayloadPromise
  extends Promise<gcAccountDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcAccountDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcAccountDataPreviousValuesPromise>() => T;
}

export interface gcAccountDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcAccountDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcAccountDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcAccountDataPreviousValuesSubscription>() => T;
}

export interface gcAccountDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface gcAccountDataPreviousValuesPromise
  extends Promise<gcAccountDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
}

export interface gcAccountDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcAccountDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
}

export interface gcCollabDataSubscriptionPayload {
  mutation: MutationType;
  node: gcCollabData;
  updatedFields: String[];
  previousValues: gcCollabDataPreviousValues;
}

export interface gcCollabDataSubscriptionPayloadPromise
  extends Promise<gcCollabDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcCollabDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcCollabDataPreviousValuesPromise>() => T;
}

export interface gcCollabDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcCollabDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcCollabDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcCollabDataPreviousValuesSubscription>() => T;
}

export interface gcCollabDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
}

export interface gcCollabDataPreviousValuesPromise
  extends Promise<gcCollabDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
}

export interface gcCollabDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcCollabDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
}

export interface gcConnexDataSubscriptionPayload {
  mutation: MutationType;
  node: gcConnexData;
  updatedFields: String[];
  previousValues: gcConnexDataPreviousValues;
}

export interface gcConnexDataSubscriptionPayloadPromise
  extends Promise<gcConnexDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcConnexDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcConnexDataPreviousValuesPromise>() => T;
}

export interface gcConnexDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcConnexDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcConnexDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcConnexDataPreviousValuesSubscription>() => T;
}

export interface gcConnexDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
}

export interface gcConnexDataPreviousValuesPromise
  extends Promise<gcConnexDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
}

export interface gcConnexDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcConnexDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
}

export interface gcMessageDataSubscriptionPayload {
  mutation: MutationType;
  node: gcMessageData;
  updatedFields: String[];
  previousValues: gcMessageDataPreviousValues;
}

export interface gcMessageDataSubscriptionPayloadPromise
  extends Promise<gcMessageDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcMessageDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcMessageDataPreviousValuesPromise>() => T;
}

export interface gcMessageDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcMessageDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcMessageDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcMessageDataPreviousValuesSubscription>() => T;
}

export interface gcMessageDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcMessageDataPreviousValuesPromise
  extends Promise<gcMessageDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumChannelMessages: () => Promise<Int>;
  numNewChannelMessages: () => Promise<Int>;
  totalNumPrivateGroupMessages: () => Promise<Int>;
  numNewPrivateGroupMessages: () => Promise<Int>;
  totalNumDirectMessages: () => Promise<Int>;
  numNewDirectMessages: () => Promise<Int>;
  totalNumFileUploads: () => Promise<Int>;
  numNewFileUploads: () => Promise<Int>;
}

export interface gcMessageDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcMessageDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumChannelMessages: () => Promise<AsyncIterator<Int>>;
  numNewChannelMessages: () => Promise<AsyncIterator<Int>>;
  totalNumPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  numNewPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  totalNumDirectMessages: () => Promise<AsyncIterator<Int>>;
  numNewDirectMessages: () => Promise<AsyncIterator<Int>>;
  totalNumFileUploads: () => Promise<AsyncIterator<Int>>;
  numNewFileUploads: () => Promise<AsyncIterator<Int>>;
}

export interface gcPediaDataSubscriptionPayload {
  mutation: MutationType;
  node: gcPediaData;
  updatedFields: String[];
  previousValues: gcPediaDataPreviousValues;
}

export interface gcPediaDataSubscriptionPayloadPromise
  extends Promise<gcPediaDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcPediaDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcPediaDataPreviousValuesPromise>() => T;
}

export interface gcPediaDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcPediaDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcPediaDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcPediaDataPreviousValuesSubscription>() => T;
}

export interface gcPediaDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcPediaDataPreviousValuesPromise
  extends Promise<gcPediaDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcPediaDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcPediaDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface gcWikiDataSubscriptionPayload {
  mutation: MutationType;
  node: gcWikiData;
  updatedFields: String[];
  previousValues: gcWikiDataPreviousValues;
}

export interface gcWikiDataSubscriptionPayloadPromise
  extends Promise<gcWikiDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcWikiDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcWikiDataPreviousValuesPromise>() => T;
}

export interface gcWikiDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcWikiDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcWikiDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcWikiDataPreviousValuesSubscription>() => T;
}

export interface gcWikiDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataPreviousValuesPromise
  extends Promise<gcWikiDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcWikiDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcWikiDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Period",
    embedded: false
  },
  {
    name: "gaStats",
    embedded: false
  },
  {
    name: "gcAccountData",
    embedded: false
  },
  {
    name: "gcCollabData",
    embedded: false
  },
  {
    name: "gcConnexData",
    embedded: false
  },
  {
    name: "gcMessageData",
    embedded: false
  },
  {
    name: "gcPediaData",
    embedded: false
  },
  {
    name: "gcWikiData",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/reporting`
});
export const prisma = new Prisma();
