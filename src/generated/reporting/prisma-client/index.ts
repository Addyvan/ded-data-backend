// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  period: (where?: PeriodWhereInput) => Promise<boolean>;
  gaStats: (where?: gaStatsWhereInput) => Promise<boolean>;
  gcAccountData: (where?: gcAccountDataWhereInput) => Promise<boolean>;
  gcCollabData: (where?: gcCollabDataWhereInput) => Promise<boolean>;
  gcConnexData: (where?: gcConnexDataWhereInput) => Promise<boolean>;
  gcMessageData: (where?: gcMessageDataWhereInput) => Promise<boolean>;
  gcPediaData: (where?: gcPediaDataWhereInput) => Promise<boolean>;
  gcWikiData: (where?: gcWikiDataWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  period: (where: PeriodWhereUniqueInput) => PeriodPromise;
  periods: (
    args?: {
      where?: PeriodWhereInput;
      orderBy?: PeriodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Period>;
  periodsConnection: (
    args?: {
      where?: PeriodWhereInput;
      orderBy?: PeriodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PeriodConnectionPromise;
  gaStats: (where: gaStatsWhereUniqueInput) => gaStatsPromise;
  gaStatses: (
    args?: {
      where?: gaStatsWhereInput;
      orderBy?: gaStatsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gaStats>;
  gaStatsesConnection: (
    args?: {
      where?: gaStatsWhereInput;
      orderBy?: gaStatsOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gaStatsConnectionPromise;
  gcAccountData: (where: gcAccountDataWhereUniqueInput) => gcAccountDataPromise;
  gcAccountDatas: (
    args?: {
      where?: gcAccountDataWhereInput;
      orderBy?: gcAccountDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gcAccountData>;
  gcAccountDatasConnection: (
    args?: {
      where?: gcAccountDataWhereInput;
      orderBy?: gcAccountDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gcAccountDataConnectionPromise;
  gcCollabData: (where: gcCollabDataWhereUniqueInput) => gcCollabDataPromise;
  gcCollabDatas: (
    args?: {
      where?: gcCollabDataWhereInput;
      orderBy?: gcCollabDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gcCollabData>;
  gcCollabDatasConnection: (
    args?: {
      where?: gcCollabDataWhereInput;
      orderBy?: gcCollabDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gcCollabDataConnectionPromise;
  gcConnexData: (where: gcConnexDataWhereUniqueInput) => gcConnexDataPromise;
  gcConnexDatas: (
    args?: {
      where?: gcConnexDataWhereInput;
      orderBy?: gcConnexDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gcConnexData>;
  gcConnexDatasConnection: (
    args?: {
      where?: gcConnexDataWhereInput;
      orderBy?: gcConnexDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gcConnexDataConnectionPromise;
  gcMessageData: (where: gcMessageDataWhereUniqueInput) => gcMessageDataPromise;
  gcMessageDatas: (
    args?: {
      where?: gcMessageDataWhereInput;
      orderBy?: gcMessageDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gcMessageData>;
  gcMessageDatasConnection: (
    args?: {
      where?: gcMessageDataWhereInput;
      orderBy?: gcMessageDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gcMessageDataConnectionPromise;
  gcPediaData: (where: gcPediaDataWhereUniqueInput) => gcPediaDataPromise;
  gcPediaDatas: (
    args?: {
      where?: gcPediaDataWhereInput;
      orderBy?: gcPediaDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gcPediaData>;
  gcPediaDatasConnection: (
    args?: {
      where?: gcPediaDataWhereInput;
      orderBy?: gcPediaDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gcPediaDataConnectionPromise;
  gcWikiData: (where: gcWikiDataWhereUniqueInput) => gcWikiDataPromise;
  gcWikiDatas: (
    args?: {
      where?: gcWikiDataWhereInput;
      orderBy?: gcWikiDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<gcWikiData>;
  gcWikiDatasConnection: (
    args?: {
      where?: gcWikiDataWhereInput;
      orderBy?: gcWikiDataOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => gcWikiDataConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPeriod: (data: PeriodCreateInput) => PeriodPromise;
  updatePeriod: (
    args: { data: PeriodUpdateInput; where: PeriodWhereUniqueInput }
  ) => PeriodPromise;
  updateManyPeriods: (
    args: { data: PeriodUpdateManyMutationInput; where?: PeriodWhereInput }
  ) => BatchPayloadPromise;
  upsertPeriod: (
    args: {
      where: PeriodWhereUniqueInput;
      create: PeriodCreateInput;
      update: PeriodUpdateInput;
    }
  ) => PeriodPromise;
  deletePeriod: (where: PeriodWhereUniqueInput) => PeriodPromise;
  deleteManyPeriods: (where?: PeriodWhereInput) => BatchPayloadPromise;
  creategaStats: (data: gaStatsCreateInput) => gaStatsPromise;
  updategaStats: (
    args: { data: gaStatsUpdateInput; where: gaStatsWhereUniqueInput }
  ) => gaStatsPromise;
  updateManygaStatses: (
    args: { data: gaStatsUpdateManyMutationInput; where?: gaStatsWhereInput }
  ) => BatchPayloadPromise;
  upsertgaStats: (
    args: {
      where: gaStatsWhereUniqueInput;
      create: gaStatsCreateInput;
      update: gaStatsUpdateInput;
    }
  ) => gaStatsPromise;
  deletegaStats: (where: gaStatsWhereUniqueInput) => gaStatsPromise;
  deleteManygaStatses: (where?: gaStatsWhereInput) => BatchPayloadPromise;
  creategcAccountData: (data: gcAccountDataCreateInput) => gcAccountDataPromise;
  updategcAccountData: (
    args: {
      data: gcAccountDataUpdateInput;
      where: gcAccountDataWhereUniqueInput;
    }
  ) => gcAccountDataPromise;
  updateManygcAccountDatas: (
    args: {
      data: gcAccountDataUpdateManyMutationInput;
      where?: gcAccountDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertgcAccountData: (
    args: {
      where: gcAccountDataWhereUniqueInput;
      create: gcAccountDataCreateInput;
      update: gcAccountDataUpdateInput;
    }
  ) => gcAccountDataPromise;
  deletegcAccountData: (
    where: gcAccountDataWhereUniqueInput
  ) => gcAccountDataPromise;
  deleteManygcAccountDatas: (
    where?: gcAccountDataWhereInput
  ) => BatchPayloadPromise;
  creategcCollabData: (data: gcCollabDataCreateInput) => gcCollabDataPromise;
  updategcCollabData: (
    args: { data: gcCollabDataUpdateInput; where: gcCollabDataWhereUniqueInput }
  ) => gcCollabDataPromise;
  updateManygcCollabDatas: (
    args: {
      data: gcCollabDataUpdateManyMutationInput;
      where?: gcCollabDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertgcCollabData: (
    args: {
      where: gcCollabDataWhereUniqueInput;
      create: gcCollabDataCreateInput;
      update: gcCollabDataUpdateInput;
    }
  ) => gcCollabDataPromise;
  deletegcCollabData: (
    where: gcCollabDataWhereUniqueInput
  ) => gcCollabDataPromise;
  deleteManygcCollabDatas: (
    where?: gcCollabDataWhereInput
  ) => BatchPayloadPromise;
  creategcConnexData: (data: gcConnexDataCreateInput) => gcConnexDataPromise;
  updategcConnexData: (
    args: { data: gcConnexDataUpdateInput; where: gcConnexDataWhereUniqueInput }
  ) => gcConnexDataPromise;
  updateManygcConnexDatas: (
    args: {
      data: gcConnexDataUpdateManyMutationInput;
      where?: gcConnexDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertgcConnexData: (
    args: {
      where: gcConnexDataWhereUniqueInput;
      create: gcConnexDataCreateInput;
      update: gcConnexDataUpdateInput;
    }
  ) => gcConnexDataPromise;
  deletegcConnexData: (
    where: gcConnexDataWhereUniqueInput
  ) => gcConnexDataPromise;
  deleteManygcConnexDatas: (
    where?: gcConnexDataWhereInput
  ) => BatchPayloadPromise;
  creategcMessageData: (data: gcMessageDataCreateInput) => gcMessageDataPromise;
  updategcMessageData: (
    args: {
      data: gcMessageDataUpdateInput;
      where: gcMessageDataWhereUniqueInput;
    }
  ) => gcMessageDataPromise;
  updateManygcMessageDatas: (
    args: {
      data: gcMessageDataUpdateManyMutationInput;
      where?: gcMessageDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertgcMessageData: (
    args: {
      where: gcMessageDataWhereUniqueInput;
      create: gcMessageDataCreateInput;
      update: gcMessageDataUpdateInput;
    }
  ) => gcMessageDataPromise;
  deletegcMessageData: (
    where: gcMessageDataWhereUniqueInput
  ) => gcMessageDataPromise;
  deleteManygcMessageDatas: (
    where?: gcMessageDataWhereInput
  ) => BatchPayloadPromise;
  creategcPediaData: (data: gcPediaDataCreateInput) => gcPediaDataPromise;
  updategcPediaData: (
    args: { data: gcPediaDataUpdateInput; where: gcPediaDataWhereUniqueInput }
  ) => gcPediaDataPromise;
  updateManygcPediaDatas: (
    args: {
      data: gcPediaDataUpdateManyMutationInput;
      where?: gcPediaDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertgcPediaData: (
    args: {
      where: gcPediaDataWhereUniqueInput;
      create: gcPediaDataCreateInput;
      update: gcPediaDataUpdateInput;
    }
  ) => gcPediaDataPromise;
  deletegcPediaData: (where: gcPediaDataWhereUniqueInput) => gcPediaDataPromise;
  deleteManygcPediaDatas: (
    where?: gcPediaDataWhereInput
  ) => BatchPayloadPromise;
  creategcWikiData: (data: gcWikiDataCreateInput) => gcWikiDataPromise;
  updategcWikiData: (
    args: { data: gcWikiDataUpdateInput; where: gcWikiDataWhereUniqueInput }
  ) => gcWikiDataPromise;
  updateManygcWikiDatas: (
    args: {
      data: gcWikiDataUpdateManyMutationInput;
      where?: gcWikiDataWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertgcWikiData: (
    args: {
      where: gcWikiDataWhereUniqueInput;
      create: gcWikiDataCreateInput;
      update: gcWikiDataUpdateInput;
    }
  ) => gcWikiDataPromise;
  deletegcWikiData: (where: gcWikiDataWhereUniqueInput) => gcWikiDataPromise;
  deleteManygcWikiDatas: (where?: gcWikiDataWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  period: (
    where?: PeriodSubscriptionWhereInput
  ) => PeriodSubscriptionPayloadSubscription;
  gaStats: (
    where?: gaStatsSubscriptionWhereInput
  ) => gaStatsSubscriptionPayloadSubscription;
  gcAccountData: (
    where?: gcAccountDataSubscriptionWhereInput
  ) => gcAccountDataSubscriptionPayloadSubscription;
  gcCollabData: (
    where?: gcCollabDataSubscriptionWhereInput
  ) => gcCollabDataSubscriptionPayloadSubscription;
  gcConnexData: (
    where?: gcConnexDataSubscriptionWhereInput
  ) => gcConnexDataSubscriptionPayloadSubscription;
  gcMessageData: (
    where?: gcMessageDataSubscriptionWhereInput
  ) => gcMessageDataSubscriptionPayloadSubscription;
  gcPediaData: (
    where?: gcPediaDataSubscriptionWhereInput
  ) => gcPediaDataSubscriptionPayloadSubscription;
  gcWikiData: (
    where?: gcWikiDataSubscriptionWhereInput
  ) => gcWikiDataSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PeriodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "month_ASC"
  | "month_DESC"
  | "year_ASC"
  | "year_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gaStatsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "numSessions_ASC"
  | "numSessions_DESC"
  | "avgPageviewsPerSession_ASC"
  | "avgPageviewsPerSession_DESC"
  | "avgSessionDuration_ASC"
  | "avgSessionDuration_DESC"
  | "avgPageLoadTime_ASC"
  | "avgPageLoadTime_DESC"
  | "bounceRate_ASC"
  | "bounceRate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gcAccountDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gcCollabDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumGroups_ASC"
  | "totalNumGroups_DESC"
  | "numNewGroups_ASC"
  | "numNewGroups_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gcConnexDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumGroups_ASC"
  | "totalNumGroups_DESC"
  | "numNewGroups_ASC"
  | "numNewGroups_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gcMessageDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumChannelMessages_ASC"
  | "totalNumChannelMessages_DESC"
  | "numNewChannelMessages_ASC"
  | "numNewChannelMessages_DESC"
  | "totalNumPrivateGroupMessages_ASC"
  | "totalNumPrivateGroupMessages_DESC"
  | "numNewPrivateGroupMessages_ASC"
  | "numNewPrivateGroupMessages_DESC"
  | "totalNumDirectMessages_ASC"
  | "totalNumDirectMessages_DESC"
  | "numNewDirectMessages_ASC"
  | "numNewDirectMessages_DESC"
  | "totalNumFileUploads_ASC"
  | "totalNumFileUploads_DESC"
  | "numNewFileUploads_ASC"
  | "numNewFileUploads_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gcPediaDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumArticles_ASC"
  | "totalNumArticles_DESC"
  | "numNewArticles_ASC"
  | "numNewArticles_DESC"
  | "totalNumEdits_ASC"
  | "totalNumEdits_DESC"
  | "numNewEdits_ASC"
  | "numNewEdits_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type gcWikiDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "totalNumAccounts_ASC"
  | "totalNumAccounts_DESC"
  | "numNewAccounts_ASC"
  | "numNewAccounts_DESC"
  | "totalNumArticles_ASC"
  | "totalNumArticles_DESC"
  | "numNewArticles_ASC"
  | "numNewArticles_DESC"
  | "totalNumEdits_ASC"
  | "totalNumEdits_DESC"
  | "numNewEdits_ASC"
  | "numNewEdits_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface gcCollabDataUpsertWithoutPeriodInput {
  update: gcCollabDataUpdateWithoutPeriodDataInput;
  create: gcCollabDataCreateWithoutPeriodInput;
}

export type PeriodWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface gcCollabDataCreatemostActiveGroupsInput {
  set?: String[] | String;
}

export interface PeriodCreateOneWithoutConnexInput {
  create?: PeriodCreateWithoutConnexInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcConnexDataCreateOneWithoutPeriodInput {
  create?: gcConnexDataCreateWithoutPeriodInput;
  connect?: gcConnexDataWhereUniqueInput;
}

export interface gcConnexDataUpsertWithoutPeriodInput {
  update: gcConnexDataUpdateWithoutPeriodDataInput;
  create: gcConnexDataCreateWithoutPeriodInput;
}

export interface gcConnexDataCreateWithoutPeriodInput {
  id?: ID_Input;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsCreateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcConnexDataCreatemostActiveDepartmentsInput;
  mostActiveGroups?: gcConnexDataCreatemostActiveGroupsInput;
}

export interface gcAccountDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: PeriodWhereInput;
  totalNumAccounts?: Int;
  totalNumAccounts_not?: Int;
  totalNumAccounts_in?: Int[] | Int;
  totalNumAccounts_not_in?: Int[] | Int;
  totalNumAccounts_lt?: Int;
  totalNumAccounts_lte?: Int;
  totalNumAccounts_gt?: Int;
  totalNumAccounts_gte?: Int;
  numNewAccounts?: Int;
  numNewAccounts_not?: Int;
  numNewAccounts_in?: Int[] | Int;
  numNewAccounts_not_in?: Int[] | Int;
  numNewAccounts_lt?: Int;
  numNewAccounts_lte?: Int;
  numNewAccounts_gt?: Int;
  numNewAccounts_gte?: Int;
  AND?: gcAccountDataWhereInput[] | gcAccountDataWhereInput;
  OR?: gcAccountDataWhereInput[] | gcAccountDataWhereInput;
  NOT?: gcAccountDataWhereInput[] | gcAccountDataWhereInput;
}

export interface gcConnexDataCreatemostActiveDepartmentsInput {
  set?: String[] | String;
}

export interface gaStatsWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  numSessions?: Int;
  numSessions_not?: Int;
  numSessions_in?: Int[] | Int;
  numSessions_not_in?: Int[] | Int;
  numSessions_lt?: Int;
  numSessions_lte?: Int;
  numSessions_gt?: Int;
  numSessions_gte?: Int;
  avgPageviewsPerSession?: Float;
  avgPageviewsPerSession_not?: Float;
  avgPageviewsPerSession_in?: Float[] | Float;
  avgPageviewsPerSession_not_in?: Float[] | Float;
  avgPageviewsPerSession_lt?: Float;
  avgPageviewsPerSession_lte?: Float;
  avgPageviewsPerSession_gt?: Float;
  avgPageviewsPerSession_gte?: Float;
  avgSessionDuration?: Float;
  avgSessionDuration_not?: Float;
  avgSessionDuration_in?: Float[] | Float;
  avgSessionDuration_not_in?: Float[] | Float;
  avgSessionDuration_lt?: Float;
  avgSessionDuration_lte?: Float;
  avgSessionDuration_gt?: Float;
  avgSessionDuration_gte?: Float;
  avgPageLoadTime?: Float;
  avgPageLoadTime_not?: Float;
  avgPageLoadTime_in?: Float[] | Float;
  avgPageLoadTime_not_in?: Float[] | Float;
  avgPageLoadTime_lt?: Float;
  avgPageLoadTime_lte?: Float;
  avgPageLoadTime_gt?: Float;
  avgPageLoadTime_gte?: Float;
  bounceRate?: Float;
  bounceRate_not?: Float;
  bounceRate_in?: Float[] | Float;
  bounceRate_not_in?: Float[] | Float;
  bounceRate_lt?: Float;
  bounceRate_lte?: Float;
  bounceRate_gt?: Float;
  bounceRate_gte?: Float;
  AND?: gaStatsWhereInput[] | gaStatsWhereInput;
  OR?: gaStatsWhereInput[] | gaStatsWhereInput;
  NOT?: gaStatsWhereInput[] | gaStatsWhereInput;
}

export interface gcConnexDataCreatemostActiveGroupsInput {
  set?: String[] | String;
}

export interface gcMessageDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: PeriodWhereInput;
  totalNumAccounts?: Int;
  totalNumAccounts_not?: Int;
  totalNumAccounts_in?: Int[] | Int;
  totalNumAccounts_not_in?: Int[] | Int;
  totalNumAccounts_lt?: Int;
  totalNumAccounts_lte?: Int;
  totalNumAccounts_gt?: Int;
  totalNumAccounts_gte?: Int;
  numNewAccounts?: Int;
  numNewAccounts_not?: Int;
  numNewAccounts_in?: Int[] | Int;
  numNewAccounts_not_in?: Int[] | Int;
  numNewAccounts_lt?: Int;
  numNewAccounts_lte?: Int;
  numNewAccounts_gt?: Int;
  numNewAccounts_gte?: Int;
  totalNumChannelMessages?: Int;
  totalNumChannelMessages_not?: Int;
  totalNumChannelMessages_in?: Int[] | Int;
  totalNumChannelMessages_not_in?: Int[] | Int;
  totalNumChannelMessages_lt?: Int;
  totalNumChannelMessages_lte?: Int;
  totalNumChannelMessages_gt?: Int;
  totalNumChannelMessages_gte?: Int;
  numNewChannelMessages?: Int;
  numNewChannelMessages_not?: Int;
  numNewChannelMessages_in?: Int[] | Int;
  numNewChannelMessages_not_in?: Int[] | Int;
  numNewChannelMessages_lt?: Int;
  numNewChannelMessages_lte?: Int;
  numNewChannelMessages_gt?: Int;
  numNewChannelMessages_gte?: Int;
  totalNumPrivateGroupMessages?: Int;
  totalNumPrivateGroupMessages_not?: Int;
  totalNumPrivateGroupMessages_in?: Int[] | Int;
  totalNumPrivateGroupMessages_not_in?: Int[] | Int;
  totalNumPrivateGroupMessages_lt?: Int;
  totalNumPrivateGroupMessages_lte?: Int;
  totalNumPrivateGroupMessages_gt?: Int;
  totalNumPrivateGroupMessages_gte?: Int;
  numNewPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages_not?: Int;
  numNewPrivateGroupMessages_in?: Int[] | Int;
  numNewPrivateGroupMessages_not_in?: Int[] | Int;
  numNewPrivateGroupMessages_lt?: Int;
  numNewPrivateGroupMessages_lte?: Int;
  numNewPrivateGroupMessages_gt?: Int;
  numNewPrivateGroupMessages_gte?: Int;
  totalNumDirectMessages?: Int;
  totalNumDirectMessages_not?: Int;
  totalNumDirectMessages_in?: Int[] | Int;
  totalNumDirectMessages_not_in?: Int[] | Int;
  totalNumDirectMessages_lt?: Int;
  totalNumDirectMessages_lte?: Int;
  totalNumDirectMessages_gt?: Int;
  totalNumDirectMessages_gte?: Int;
  numNewDirectMessages?: Int;
  numNewDirectMessages_not?: Int;
  numNewDirectMessages_in?: Int[] | Int;
  numNewDirectMessages_not_in?: Int[] | Int;
  numNewDirectMessages_lt?: Int;
  numNewDirectMessages_lte?: Int;
  numNewDirectMessages_gt?: Int;
  numNewDirectMessages_gte?: Int;
  totalNumFileUploads?: Int;
  totalNumFileUploads_not?: Int;
  totalNumFileUploads_in?: Int[] | Int;
  totalNumFileUploads_not_in?: Int[] | Int;
  totalNumFileUploads_lt?: Int;
  totalNumFileUploads_lte?: Int;
  totalNumFileUploads_gt?: Int;
  totalNumFileUploads_gte?: Int;
  numNewFileUploads?: Int;
  numNewFileUploads_not?: Int;
  numNewFileUploads_in?: Int[] | Int;
  numNewFileUploads_not_in?: Int[] | Int;
  numNewFileUploads_lt?: Int;
  numNewFileUploads_lte?: Int;
  numNewFileUploads_gt?: Int;
  numNewFileUploads_gte?: Int;
  AND?: gcMessageDataWhereInput[] | gcMessageDataWhereInput;
  OR?: gcMessageDataWhereInput[] | gcMessageDataWhereInput;
  NOT?: gcMessageDataWhereInput[] | gcMessageDataWhereInput;
}

export interface gcMessageDataCreateOneWithoutPeriodInput {
  create?: gcMessageDataCreateWithoutPeriodInput;
  connect?: gcMessageDataWhereUniqueInput;
}

export interface gcWikiDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: PeriodWhereInput;
  totalNumAccounts?: Int;
  totalNumAccounts_not?: Int;
  totalNumAccounts_in?: Int[] | Int;
  totalNumAccounts_not_in?: Int[] | Int;
  totalNumAccounts_lt?: Int;
  totalNumAccounts_lte?: Int;
  totalNumAccounts_gt?: Int;
  totalNumAccounts_gte?: Int;
  numNewAccounts?: Int;
  numNewAccounts_not?: Int;
  numNewAccounts_in?: Int[] | Int;
  numNewAccounts_not_in?: Int[] | Int;
  numNewAccounts_lt?: Int;
  numNewAccounts_lte?: Int;
  numNewAccounts_gt?: Int;
  numNewAccounts_gte?: Int;
  gaData?: gaStatsWhereInput;
  totalNumArticles?: Int;
  totalNumArticles_not?: Int;
  totalNumArticles_in?: Int[] | Int;
  totalNumArticles_not_in?: Int[] | Int;
  totalNumArticles_lt?: Int;
  totalNumArticles_lte?: Int;
  totalNumArticles_gt?: Int;
  totalNumArticles_gte?: Int;
  numNewArticles?: Int;
  numNewArticles_not?: Int;
  numNewArticles_in?: Int[] | Int;
  numNewArticles_not_in?: Int[] | Int;
  numNewArticles_lt?: Int;
  numNewArticles_lte?: Int;
  numNewArticles_gt?: Int;
  numNewArticles_gte?: Int;
  totalNumEdits?: Int;
  totalNumEdits_not?: Int;
  totalNumEdits_in?: Int[] | Int;
  totalNumEdits_not_in?: Int[] | Int;
  totalNumEdits_lt?: Int;
  totalNumEdits_lte?: Int;
  totalNumEdits_gt?: Int;
  totalNumEdits_gte?: Int;
  numNewEdits?: Int;
  numNewEdits_not?: Int;
  numNewEdits_in?: Int[] | Int;
  numNewEdits_not_in?: Int[] | Int;
  numNewEdits_lt?: Int;
  numNewEdits_lte?: Int;
  numNewEdits_gt?: Int;
  numNewEdits_gte?: Int;
  AND?: gcWikiDataWhereInput[] | gcWikiDataWhereInput;
  OR?: gcWikiDataWhereInput[] | gcWikiDataWhereInput;
  NOT?: gcWikiDataWhereInput[] | gcWikiDataWhereInput;
}

export interface gcMessageDataCreateWithoutPeriodInput {
  id?: ID_Input;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcPediaDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gcPediaDataWhereInput;
  AND?: gcPediaDataSubscriptionWhereInput[] | gcPediaDataSubscriptionWhereInput;
  OR?: gcPediaDataSubscriptionWhereInput[] | gcPediaDataSubscriptionWhereInput;
  NOT?: gcPediaDataSubscriptionWhereInput[] | gcPediaDataSubscriptionWhereInput;
}

export interface gcPediaDataCreateOneWithoutPeriodInput {
  create?: gcPediaDataCreateWithoutPeriodInput;
  connect?: gcPediaDataWhereUniqueInput;
}

export interface gcConnexDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gcConnexDataWhereInput;
  AND?:
    | gcConnexDataSubscriptionWhereInput[]
    | gcConnexDataSubscriptionWhereInput;
  OR?:
    | gcConnexDataSubscriptionWhereInput[]
    | gcConnexDataSubscriptionWhereInput;
  NOT?:
    | gcConnexDataSubscriptionWhereInput[]
    | gcConnexDataSubscriptionWhereInput;
}

export interface gcPediaDataCreateWithoutPeriodInput {
  id?: ID_Input;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcAccountDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gcAccountDataWhereInput;
  AND?:
    | gcAccountDataSubscriptionWhereInput[]
    | gcAccountDataSubscriptionWhereInput;
  OR?:
    | gcAccountDataSubscriptionWhereInput[]
    | gcAccountDataSubscriptionWhereInput;
  NOT?:
    | gcAccountDataSubscriptionWhereInput[]
    | gcAccountDataSubscriptionWhereInput;
}

export interface gcWikiDataCreateOneWithoutPeriodInput {
  create?: gcWikiDataCreateWithoutPeriodInput;
  connect?: gcWikiDataWhereUniqueInput;
}

export interface gaStatsSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gaStatsWhereInput;
  AND?: gaStatsSubscriptionWhereInput[] | gaStatsSubscriptionWhereInput;
  OR?: gaStatsSubscriptionWhereInput[] | gaStatsSubscriptionWhereInput;
  NOT?: gaStatsSubscriptionWhereInput[] | gaStatsSubscriptionWhereInput;
}

export interface gcWikiDataCreateWithoutPeriodInput {
  id?: ID_Input;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsCreateOneInput;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataUpdateManyMutationInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface PeriodUpdateInput {
  month?: Int;
  year?: Int;
  account?: gcAccountDataUpdateOneWithoutPeriodInput;
  collab?: gcCollabDataUpdateOneRequiredWithoutPeriodInput;
  connex?: gcConnexDataUpdateOneRequiredWithoutPeriodInput;
  message?: gcMessageDataUpdateOneRequiredWithoutPeriodInput;
  pedia?: gcPediaDataUpdateOneRequiredWithoutPeriodInput;
  wiki?: gcWikiDataUpdateOneRequiredWithoutPeriodInput;
}

export type gcAccountDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface gcAccountDataUpdateOneWithoutPeriodInput {
  create?: gcAccountDataCreateWithoutPeriodInput;
  update?: gcAccountDataUpdateWithoutPeriodDataInput;
  upsert?: gcAccountDataUpsertWithoutPeriodInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: gcAccountDataWhereUniqueInput;
}

export interface PeriodUpdateOneRequiredWithoutWikiInput {
  create?: PeriodCreateWithoutWikiInput;
  update?: PeriodUpdateWithoutWikiDataInput;
  upsert?: PeriodUpsertWithoutWikiInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcAccountDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface PeriodCreateWithoutWikiInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  account?: gcAccountDataCreateOneWithoutPeriodInput;
  collab: gcCollabDataCreateOneWithoutPeriodInput;
  connex: gcConnexDataCreateOneWithoutPeriodInput;
  message: gcMessageDataCreateOneWithoutPeriodInput;
  pedia: gcPediaDataCreateOneWithoutPeriodInput;
}

export interface gcAccountDataUpsertWithoutPeriodInput {
  update: gcAccountDataUpdateWithoutPeriodDataInput;
  create: gcAccountDataCreateWithoutPeriodInput;
}

export interface PeriodCreateOneWithoutWikiInput {
  create?: PeriodCreateWithoutWikiInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcCollabDataUpdateOneRequiredWithoutPeriodInput {
  create?: gcCollabDataCreateWithoutPeriodInput;
  update?: gcCollabDataUpdateWithoutPeriodDataInput;
  upsert?: gcCollabDataUpsertWithoutPeriodInput;
  connect?: gcCollabDataWhereUniqueInput;
}

export interface gcPediaDataUpdateManyMutationInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcCollabDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsUpdateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcCollabDataUpdatemostActiveDepartmentsInput;
  mostActiveGroups?: gcCollabDataUpdatemostActiveGroupsInput;
}

export type gcConnexDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface gaStatsUpdateOneInput {
  create?: gaStatsCreateInput;
  update?: gaStatsUpdateDataInput;
  upsert?: gaStatsUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: gaStatsWhereUniqueInput;
}

export interface PeriodUpdateOneRequiredWithoutPediaInput {
  create?: PeriodCreateWithoutPediaInput;
  update?: PeriodUpdateWithoutPediaDataInput;
  upsert?: PeriodUpsertWithoutPediaInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gaStatsUpdateDataInput {
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface PeriodCreateWithoutPediaInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  account?: gcAccountDataCreateOneWithoutPeriodInput;
  collab: gcCollabDataCreateOneWithoutPeriodInput;
  connex: gcConnexDataCreateOneWithoutPeriodInput;
  message: gcMessageDataCreateOneWithoutPeriodInput;
  wiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gaStatsUpsertNestedInput {
  update: gaStatsUpdateDataInput;
  create: gaStatsCreateInput;
}

export interface PeriodCreateOneWithoutPediaInput {
  create?: PeriodCreateWithoutPediaInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcCollabDataUpdatemostActiveDepartmentsInput {
  set?: String[] | String;
}

export interface gcMessageDataUpdateManyMutationInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcCollabDataUpdatemostActiveGroupsInput {
  set?: String[] | String;
}

export type gcPediaDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PeriodUpdateWithoutConnexDataInput {
  month?: Int;
  year?: Int;
  account?: gcAccountDataUpdateOneWithoutPeriodInput;
  collab?: gcCollabDataUpdateOneRequiredWithoutPeriodInput;
  message?: gcMessageDataUpdateOneRequiredWithoutPeriodInput;
  pedia?: gcPediaDataUpdateOneRequiredWithoutPeriodInput;
  wiki?: gcWikiDataUpdateOneRequiredWithoutPeriodInput;
}

export interface PeriodUpdateOneRequiredWithoutMessageInput {
  create?: PeriodCreateWithoutMessageInput;
  update?: PeriodUpdateWithoutMessageDataInput;
  upsert?: PeriodUpsertWithoutMessageInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcConnexDataUpdateOneRequiredWithoutPeriodInput {
  create?: gcConnexDataCreateWithoutPeriodInput;
  update?: gcConnexDataUpdateWithoutPeriodDataInput;
  upsert?: gcConnexDataUpsertWithoutPeriodInput;
  connect?: gcConnexDataWhereUniqueInput;
}

export interface PeriodCreateWithoutMessageInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  account?: gcAccountDataCreateOneWithoutPeriodInput;
  collab: gcCollabDataCreateOneWithoutPeriodInput;
  connex: gcConnexDataCreateOneWithoutPeriodInput;
  pedia: gcPediaDataCreateOneWithoutPeriodInput;
  wiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcConnexDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsUpdateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcConnexDataUpdatemostActiveDepartmentsInput;
  mostActiveGroups?: gcConnexDataUpdatemostActiveGroupsInput;
}

export interface PeriodCreateOneWithoutMessageInput {
  create?: PeriodCreateWithoutMessageInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcConnexDataUpdatemostActiveDepartmentsInput {
  set?: String[] | String;
}

export interface gcConnexDataUpdateManyMutationInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcConnexDataUpdatemostActiveDepartmentsInput;
  mostActiveGroups?: gcConnexDataUpdatemostActiveGroupsInput;
}

export interface gcConnexDataUpdatemostActiveGroupsInput {
  set?: String[] | String;
}

export interface gcAccountDataCreateOneWithoutPeriodInput {
  create?: gcAccountDataCreateWithoutPeriodInput;
  connect?: gcAccountDataWhereUniqueInput;
}

export interface PeriodUpdateOneRequiredWithoutConnexInput {
  create?: PeriodCreateWithoutConnexInput;
  update?: PeriodUpdateWithoutConnexDataInput;
  upsert?: PeriodUpsertWithoutConnexInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcCollabDataCreateOneWithoutPeriodInput {
  create?: gcCollabDataCreateWithoutPeriodInput;
  connect?: gcCollabDataWhereUniqueInput;
}

export interface gcMessageDataUpdateOneRequiredWithoutPeriodInput {
  create?: gcMessageDataCreateWithoutPeriodInput;
  update?: gcMessageDataUpdateWithoutPeriodDataInput;
  upsert?: gcMessageDataUpsertWithoutPeriodInput;
  connect?: gcMessageDataWhereUniqueInput;
}

export interface gaStatsCreateOneInput {
  create?: gaStatsCreateInput;
  connect?: gaStatsWhereUniqueInput;
}

export interface gcMessageDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcCollabDataCreatemostActiveDepartmentsInput {
  set?: String[] | String;
}

export interface gcMessageDataUpsertWithoutPeriodInput {
  update: gcMessageDataUpdateWithoutPeriodDataInput;
  create: gcMessageDataCreateWithoutPeriodInput;
}

export interface gcCollabDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: PeriodWhereInput;
  totalNumAccounts?: Int;
  totalNumAccounts_not?: Int;
  totalNumAccounts_in?: Int[] | Int;
  totalNumAccounts_not_in?: Int[] | Int;
  totalNumAccounts_lt?: Int;
  totalNumAccounts_lte?: Int;
  totalNumAccounts_gt?: Int;
  totalNumAccounts_gte?: Int;
  numNewAccounts?: Int;
  numNewAccounts_not?: Int;
  numNewAccounts_in?: Int[] | Int;
  numNewAccounts_not_in?: Int[] | Int;
  numNewAccounts_lt?: Int;
  numNewAccounts_lte?: Int;
  numNewAccounts_gt?: Int;
  numNewAccounts_gte?: Int;
  gaData?: gaStatsWhereInput;
  totalNumGroups?: Int;
  totalNumGroups_not?: Int;
  totalNumGroups_in?: Int[] | Int;
  totalNumGroups_not_in?: Int[] | Int;
  totalNumGroups_lt?: Int;
  totalNumGroups_lte?: Int;
  totalNumGroups_gt?: Int;
  totalNumGroups_gte?: Int;
  numNewGroups?: Int;
  numNewGroups_not?: Int;
  numNewGroups_in?: Int[] | Int;
  numNewGroups_not_in?: Int[] | Int;
  numNewGroups_lt?: Int;
  numNewGroups_lte?: Int;
  numNewGroups_gt?: Int;
  numNewGroups_gte?: Int;
  AND?: gcCollabDataWhereInput[] | gcCollabDataWhereInput;
  OR?: gcCollabDataWhereInput[] | gcCollabDataWhereInput;
  NOT?: gcCollabDataWhereInput[] | gcCollabDataWhereInput;
}

export interface gcPediaDataUpdateOneRequiredWithoutPeriodInput {
  create?: gcPediaDataCreateWithoutPeriodInput;
  update?: gcPediaDataUpdateWithoutPeriodDataInput;
  upsert?: gcPediaDataUpsertWithoutPeriodInput;
  connect?: gcPediaDataWhereUniqueInput;
}

export interface gcPediaDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: PeriodWhereInput;
  totalNumAccounts?: Int;
  totalNumAccounts_not?: Int;
  totalNumAccounts_in?: Int[] | Int;
  totalNumAccounts_not_in?: Int[] | Int;
  totalNumAccounts_lt?: Int;
  totalNumAccounts_lte?: Int;
  totalNumAccounts_gt?: Int;
  totalNumAccounts_gte?: Int;
  numNewAccounts?: Int;
  numNewAccounts_not?: Int;
  numNewAccounts_in?: Int[] | Int;
  numNewAccounts_not_in?: Int[] | Int;
  numNewAccounts_lt?: Int;
  numNewAccounts_lte?: Int;
  numNewAccounts_gt?: Int;
  numNewAccounts_gte?: Int;
  totalNumArticles?: Int;
  totalNumArticles_not?: Int;
  totalNumArticles_in?: Int[] | Int;
  totalNumArticles_not_in?: Int[] | Int;
  totalNumArticles_lt?: Int;
  totalNumArticles_lte?: Int;
  totalNumArticles_gt?: Int;
  totalNumArticles_gte?: Int;
  numNewArticles?: Int;
  numNewArticles_not?: Int;
  numNewArticles_in?: Int[] | Int;
  numNewArticles_not_in?: Int[] | Int;
  numNewArticles_lt?: Int;
  numNewArticles_lte?: Int;
  numNewArticles_gt?: Int;
  numNewArticles_gte?: Int;
  totalNumEdits?: Int;
  totalNumEdits_not?: Int;
  totalNumEdits_in?: Int[] | Int;
  totalNumEdits_not_in?: Int[] | Int;
  totalNumEdits_lt?: Int;
  totalNumEdits_lte?: Int;
  totalNumEdits_gt?: Int;
  totalNumEdits_gte?: Int;
  numNewEdits?: Int;
  numNewEdits_not?: Int;
  numNewEdits_in?: Int[] | Int;
  numNewEdits_not_in?: Int[] | Int;
  numNewEdits_lt?: Int;
  numNewEdits_lte?: Int;
  numNewEdits_gt?: Int;
  numNewEdits_gte?: Int;
  AND?: gcPediaDataWhereInput[] | gcPediaDataWhereInput;
  OR?: gcPediaDataWhereInput[] | gcPediaDataWhereInput;
  NOT?: gcPediaDataWhereInput[] | gcPediaDataWhereInput;
}

export interface gcPediaDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcMessageDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gcMessageDataWhereInput;
  AND?:
    | gcMessageDataSubscriptionWhereInput[]
    | gcMessageDataSubscriptionWhereInput;
  OR?:
    | gcMessageDataSubscriptionWhereInput[]
    | gcMessageDataSubscriptionWhereInput;
  NOT?:
    | gcMessageDataSubscriptionWhereInput[]
    | gcMessageDataSubscriptionWhereInput;
}

export interface gcPediaDataUpsertWithoutPeriodInput {
  update: gcPediaDataUpdateWithoutPeriodDataInput;
  create: gcPediaDataCreateWithoutPeriodInput;
}

export type gaStatsWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface gcWikiDataUpdateOneRequiredWithoutPeriodInput {
  create?: gcWikiDataCreateWithoutPeriodInput;
  update?: gcWikiDataUpdateWithoutPeriodDataInput;
  upsert?: gcWikiDataUpsertWithoutPeriodInput;
  connect?: gcWikiDataWhereUniqueInput;
}

export interface PeriodUpsertWithoutWikiInput {
  update: PeriodUpdateWithoutWikiDataInput;
  create: PeriodCreateWithoutWikiInput;
}

export interface gcWikiDataUpdateWithoutPeriodDataInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsUpdateOneInput;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataUpdateInput {
  period?: PeriodUpdateOneRequiredWithoutWikiInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsUpdateOneInput;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataUpsertWithoutPeriodInput {
  update: gcWikiDataUpdateWithoutPeriodDataInput;
  create: gcWikiDataCreateWithoutPeriodInput;
}

export interface gcWikiDataCreateInput {
  id?: ID_Input;
  period: PeriodCreateOneWithoutWikiInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsCreateOneInput;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface PeriodUpdateManyMutationInput {
  month?: Int;
  year?: Int;
}

export interface PeriodUpdateWithoutPediaDataInput {
  month?: Int;
  year?: Int;
  account?: gcAccountDataUpdateOneWithoutPeriodInput;
  collab?: gcCollabDataUpdateOneRequiredWithoutPeriodInput;
  connex?: gcConnexDataUpdateOneRequiredWithoutPeriodInput;
  message?: gcMessageDataUpdateOneRequiredWithoutPeriodInput;
  wiki?: gcWikiDataUpdateOneRequiredWithoutPeriodInput;
}

export interface gcConnexDataUpdateInput {
  period?: PeriodUpdateOneRequiredWithoutConnexInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsUpdateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcConnexDataUpdatemostActiveDepartmentsInput;
  mostActiveGroups?: gcConnexDataUpdatemostActiveGroupsInput;
}

export type gcMessageDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PeriodCreateWithoutConnexInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  account?: gcAccountDataCreateOneWithoutPeriodInput;
  collab: gcCollabDataCreateOneWithoutPeriodInput;
  message: gcMessageDataCreateOneWithoutPeriodInput;
  pedia: gcPediaDataCreateOneWithoutPeriodInput;
  wiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface PeriodUpsertWithoutMessageInput {
  update: PeriodUpdateWithoutMessageDataInput;
  create: PeriodCreateWithoutMessageInput;
}

export interface gaStatsUpdateInput {
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface gcMessageDataUpdateInput {
  period?: PeriodUpdateOneRequiredWithoutMessageInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gaStatsUpdateManyMutationInput {
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface gcMessageDataCreateInput {
  id?: ID_Input;
  period: PeriodCreateOneWithoutMessageInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcAccountDataCreateInput {
  id?: ID_Input;
  period: PeriodCreateOneWithoutAccountInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface PeriodCreateInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  account?: gcAccountDataCreateOneWithoutPeriodInput;
  collab: gcCollabDataCreateOneWithoutPeriodInput;
  connex: gcConnexDataCreateOneWithoutPeriodInput;
  message: gcMessageDataCreateOneWithoutPeriodInput;
  pedia: gcPediaDataCreateOneWithoutPeriodInput;
  wiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface PeriodCreateOneWithoutAccountInput {
  create?: PeriodCreateWithoutAccountInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gcCollabDataCreateWithoutPeriodInput {
  id?: ID_Input;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsCreateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcCollabDataCreatemostActiveDepartmentsInput;
  mostActiveGroups?: gcCollabDataCreatemostActiveGroupsInput;
}

export interface PeriodCreateWithoutAccountInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  collab: gcCollabDataCreateOneWithoutPeriodInput;
  connex: gcConnexDataCreateOneWithoutPeriodInput;
  message: gcMessageDataCreateOneWithoutPeriodInput;
  pedia: gcPediaDataCreateOneWithoutPeriodInput;
  wiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface PeriodWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  month?: Int;
  month_not?: Int;
  month_in?: Int[] | Int;
  month_not_in?: Int[] | Int;
  month_lt?: Int;
  month_lte?: Int;
  month_gt?: Int;
  month_gte?: Int;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  account?: gcAccountDataWhereInput;
  collab?: gcCollabDataWhereInput;
  connex?: gcConnexDataWhereInput;
  message?: gcMessageDataWhereInput;
  pedia?: gcPediaDataWhereInput;
  wiki?: gcWikiDataWhereInput;
  AND?: PeriodWhereInput[] | PeriodWhereInput;
  OR?: PeriodWhereInput[] | PeriodWhereInput;
  NOT?: PeriodWhereInput[] | PeriodWhereInput;
}

export interface gcAccountDataUpdateInput {
  period?: PeriodUpdateOneRequiredWithoutAccountInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface gcWikiDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gcWikiDataWhereInput;
  AND?: gcWikiDataSubscriptionWhereInput[] | gcWikiDataSubscriptionWhereInput;
  OR?: gcWikiDataSubscriptionWhereInput[] | gcWikiDataSubscriptionWhereInput;
  NOT?: gcWikiDataSubscriptionWhereInput[] | gcWikiDataSubscriptionWhereInput;
}

export interface PeriodUpdateOneRequiredWithoutAccountInput {
  create?: PeriodCreateWithoutAccountInput;
  update?: PeriodUpdateWithoutAccountDataInput;
  upsert?: PeriodUpsertWithoutAccountInput;
  connect?: PeriodWhereUniqueInput;
}

export interface PeriodSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PeriodWhereInput;
  AND?: PeriodSubscriptionWhereInput[] | PeriodSubscriptionWhereInput;
  OR?: PeriodSubscriptionWhereInput[] | PeriodSubscriptionWhereInput;
  NOT?: PeriodSubscriptionWhereInput[] | PeriodSubscriptionWhereInput;
}

export interface PeriodUpdateWithoutAccountDataInput {
  month?: Int;
  year?: Int;
  collab?: gcCollabDataUpdateOneRequiredWithoutPeriodInput;
  connex?: gcConnexDataUpdateOneRequiredWithoutPeriodInput;
  message?: gcMessageDataUpdateOneRequiredWithoutPeriodInput;
  pedia?: gcPediaDataUpdateOneRequiredWithoutPeriodInput;
  wiki?: gcWikiDataUpdateOneRequiredWithoutPeriodInput;
}

export type gcCollabDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PeriodUpsertWithoutAccountInput {
  update: PeriodUpdateWithoutAccountDataInput;
  create: PeriodCreateWithoutAccountInput;
}

export interface gcPediaDataUpdateInput {
  period?: PeriodUpdateOneRequiredWithoutPediaInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcAccountDataUpdateManyMutationInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface PeriodUpdateWithoutMessageDataInput {
  month?: Int;
  year?: Int;
  account?: gcAccountDataUpdateOneWithoutPeriodInput;
  collab?: gcCollabDataUpdateOneRequiredWithoutPeriodInput;
  connex?: gcConnexDataUpdateOneRequiredWithoutPeriodInput;
  pedia?: gcPediaDataUpdateOneRequiredWithoutPeriodInput;
  wiki?: gcWikiDataUpdateOneRequiredWithoutPeriodInput;
}

export interface gcCollabDataCreateInput {
  id?: ID_Input;
  period: PeriodCreateOneWithoutCollabInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsCreateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcCollabDataCreatemostActiveDepartmentsInput;
  mostActiveGroups?: gcCollabDataCreatemostActiveGroupsInput;
}

export interface PeriodUpsertWithoutConnexInput {
  update: PeriodUpdateWithoutConnexDataInput;
  create: PeriodCreateWithoutConnexInput;
}

export interface PeriodCreateOneWithoutCollabInput {
  create?: PeriodCreateWithoutCollabInput;
  connect?: PeriodWhereUniqueInput;
}

export interface gaStatsCreateInput {
  id?: ID_Input;
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface PeriodCreateWithoutCollabInput {
  id?: ID_Input;
  month: Int;
  year: Int;
  account?: gcAccountDataCreateOneWithoutPeriodInput;
  connex: gcConnexDataCreateOneWithoutPeriodInput;
  message: gcMessageDataCreateOneWithoutPeriodInput;
  pedia: gcPediaDataCreateOneWithoutPeriodInput;
  wiki: gcWikiDataCreateOneWithoutPeriodInput;
}

export interface gcCollabDataSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: gcCollabDataWhereInput;
  AND?:
    | gcCollabDataSubscriptionWhereInput[]
    | gcCollabDataSubscriptionWhereInput;
  OR?:
    | gcCollabDataSubscriptionWhereInput[]
    | gcCollabDataSubscriptionWhereInput;
  NOT?:
    | gcCollabDataSubscriptionWhereInput[]
    | gcCollabDataSubscriptionWhereInput;
}

export interface gcCollabDataUpdateInput {
  period?: PeriodUpdateOneRequiredWithoutCollabInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsUpdateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcCollabDataUpdatemostActiveDepartmentsInput;
  mostActiveGroups?: gcCollabDataUpdatemostActiveGroupsInput;
}

export interface PeriodUpsertWithoutPediaInput {
  update: PeriodUpdateWithoutPediaDataInput;
  create: PeriodCreateWithoutPediaInput;
}

export interface PeriodUpdateOneRequiredWithoutCollabInput {
  create?: PeriodCreateWithoutCollabInput;
  update?: PeriodUpdateWithoutCollabDataInput;
  upsert?: PeriodUpsertWithoutCollabInput;
  connect?: PeriodWhereUniqueInput;
}

export type gcWikiDataWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface gcConnexDataCreateInput {
  id?: ID_Input;
  period: PeriodCreateOneWithoutConnexInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  gaData?: gaStatsCreateOneInput;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcConnexDataCreatemostActiveDepartmentsInput;
  mostActiveGroups?: gcConnexDataCreatemostActiveGroupsInput;
}

export interface gcCollabDataUpdateManyMutationInput {
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments?: gcCollabDataUpdatemostActiveDepartmentsInput;
  mostActiveGroups?: gcCollabDataUpdatemostActiveGroupsInput;
}

export interface PeriodUpsertWithoutCollabInput {
  update: PeriodUpdateWithoutCollabDataInput;
  create: PeriodCreateWithoutCollabInput;
}

export interface PeriodUpdateWithoutCollabDataInput {
  month?: Int;
  year?: Int;
  account?: gcAccountDataUpdateOneWithoutPeriodInput;
  connex?: gcConnexDataUpdateOneRequiredWithoutPeriodInput;
  message?: gcMessageDataUpdateOneRequiredWithoutPeriodInput;
  pedia?: gcPediaDataUpdateOneRequiredWithoutPeriodInput;
  wiki?: gcWikiDataUpdateOneRequiredWithoutPeriodInput;
}

export interface gcAccountDataCreateWithoutPeriodInput {
  id?: ID_Input;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface gcPediaDataCreateInput {
  id?: ID_Input;
  period: PeriodCreateOneWithoutPediaInput;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface PeriodUpdateWithoutWikiDataInput {
  month?: Int;
  year?: Int;
  account?: gcAccountDataUpdateOneWithoutPeriodInput;
  collab?: gcCollabDataUpdateOneRequiredWithoutPeriodInput;
  connex?: gcConnexDataUpdateOneRequiredWithoutPeriodInput;
  message?: gcMessageDataUpdateOneRequiredWithoutPeriodInput;
  pedia?: gcPediaDataUpdateOneRequiredWithoutPeriodInput;
}

export interface gcConnexDataWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  period?: PeriodWhereInput;
  totalNumAccounts?: Int;
  totalNumAccounts_not?: Int;
  totalNumAccounts_in?: Int[] | Int;
  totalNumAccounts_not_in?: Int[] | Int;
  totalNumAccounts_lt?: Int;
  totalNumAccounts_lte?: Int;
  totalNumAccounts_gt?: Int;
  totalNumAccounts_gte?: Int;
  numNewAccounts?: Int;
  numNewAccounts_not?: Int;
  numNewAccounts_in?: Int[] | Int;
  numNewAccounts_not_in?: Int[] | Int;
  numNewAccounts_lt?: Int;
  numNewAccounts_lte?: Int;
  numNewAccounts_gt?: Int;
  numNewAccounts_gte?: Int;
  gaData?: gaStatsWhereInput;
  totalNumGroups?: Int;
  totalNumGroups_not?: Int;
  totalNumGroups_in?: Int[] | Int;
  totalNumGroups_not_in?: Int[] | Int;
  totalNumGroups_lt?: Int;
  totalNumGroups_lte?: Int;
  totalNumGroups_gt?: Int;
  totalNumGroups_gte?: Int;
  numNewGroups?: Int;
  numNewGroups_not?: Int;
  numNewGroups_in?: Int[] | Int;
  numNewGroups_not_in?: Int[] | Int;
  numNewGroups_lt?: Int;
  numNewGroups_lte?: Int;
  numNewGroups_gt?: Int;
  numNewGroups_gte?: Int;
  AND?: gcConnexDataWhereInput[] | gcConnexDataWhereInput;
  OR?: gcConnexDataWhereInput[] | gcConnexDataWhereInput;
  NOT?: gcConnexDataWhereInput[] | gcConnexDataWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface gcWikiDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataPreviousValuesPromise
  extends Promise<gcWikiDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcWikiDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcWikiDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface gcAccountDataEdge {
  node: gcAccountData;
  cursor: String;
}

export interface gcAccountDataEdgePromise
  extends Promise<gcAccountDataEdge>,
    Fragmentable {
  node: <T = gcAccountDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcAccountDataEdgeSubscription
  extends Promise<AsyncIterator<gcAccountDataEdge>>,
    Fragmentable {
  node: <T = gcAccountDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PeriodConnection {
  pageInfo: PageInfo;
  edges: PeriodEdge[];
}

export interface PeriodConnectionPromise
  extends Promise<PeriodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PeriodEdge>>() => T;
  aggregate: <T = AggregatePeriodPromise>() => T;
}

export interface PeriodConnectionSubscription
  extends Promise<AsyncIterator<PeriodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PeriodEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePeriodSubscription>() => T;
}

export interface gcAccountDataConnection {
  pageInfo: PageInfo;
  edges: gcAccountDataEdge[];
}

export interface gcAccountDataConnectionPromise
  extends Promise<gcAccountDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcAccountDataEdge>>() => T;
  aggregate: <T = AggregategcAccountDataPromise>() => T;
}

export interface gcAccountDataConnectionSubscription
  extends Promise<AsyncIterator<gcAccountDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcAccountDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcAccountDataSubscription>() => T;
}

export interface gcPediaData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcPediaDataPromise extends Promise<gcPediaData>, Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcPediaDataSubscription
  extends Promise<AsyncIterator<gcPediaData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface gcWikiDataSubscriptionPayload {
  mutation: MutationType;
  node: gcWikiData;
  updatedFields: String[];
  previousValues: gcWikiDataPreviousValues;
}

export interface gcWikiDataSubscriptionPayloadPromise
  extends Promise<gcWikiDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcWikiDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcWikiDataPreviousValuesPromise>() => T;
}

export interface gcWikiDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcWikiDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcWikiDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcWikiDataPreviousValuesSubscription>() => T;
}

export interface AggregategaStats {
  count: Int;
}

export interface AggregategaStatsPromise
  extends Promise<AggregategaStats>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategaStatsSubscription
  extends Promise<AsyncIterator<AggregategaStats>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcWikiDataEdge {
  node: gcWikiData;
  cursor: String;
}

export interface gcWikiDataEdgePromise
  extends Promise<gcWikiDataEdge>,
    Fragmentable {
  node: <T = gcWikiDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcWikiDataEdgeSubscription
  extends Promise<AsyncIterator<gcWikiDataEdge>>,
    Fragmentable {
  node: <T = gcWikiDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface gaStatsEdge {
  node: gaStats;
  cursor: String;
}

export interface gaStatsEdgePromise extends Promise<gaStatsEdge>, Fragmentable {
  node: <T = gaStatsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gaStatsEdgeSubscription
  extends Promise<AsyncIterator<gaStatsEdge>>,
    Fragmentable {
  node: <T = gaStatsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface gcMessageData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcMessageDataPromise
  extends Promise<gcMessageData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumChannelMessages: () => Promise<Int>;
  numNewChannelMessages: () => Promise<Int>;
  totalNumPrivateGroupMessages: () => Promise<Int>;
  numNewPrivateGroupMessages: () => Promise<Int>;
  totalNumDirectMessages: () => Promise<Int>;
  numNewDirectMessages: () => Promise<Int>;
  totalNumFileUploads: () => Promise<Int>;
  numNewFileUploads: () => Promise<Int>;
}

export interface gcMessageDataSubscription
  extends Promise<AsyncIterator<gcMessageData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumChannelMessages: () => Promise<AsyncIterator<Int>>;
  numNewChannelMessages: () => Promise<AsyncIterator<Int>>;
  totalNumPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  numNewPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  totalNumDirectMessages: () => Promise<AsyncIterator<Int>>;
  numNewDirectMessages: () => Promise<AsyncIterator<Int>>;
  totalNumFileUploads: () => Promise<AsyncIterator<Int>>;
  numNewFileUploads: () => Promise<AsyncIterator<Int>>;
}

export interface gaStatsConnection {
  pageInfo: PageInfo;
  edges: gaStatsEdge[];
}

export interface gaStatsConnectionPromise
  extends Promise<gaStatsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gaStatsEdge>>() => T;
  aggregate: <T = AggregategaStatsPromise>() => T;
}

export interface gaStatsConnectionSubscription
  extends Promise<AsyncIterator<gaStatsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gaStatsEdgeSubscription>>>() => T;
  aggregate: <T = AggregategaStatsSubscription>() => T;
}

export interface gcPediaDataEdge {
  node: gcPediaData;
  cursor: String;
}

export interface gcPediaDataEdgePromise
  extends Promise<gcPediaDataEdge>,
    Fragmentable {
  node: <T = gcPediaDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcPediaDataEdgeSubscription
  extends Promise<AsyncIterator<gcPediaDataEdge>>,
    Fragmentable {
  node: <T = gcPediaDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Period {
  id: ID_Output;
  month: Int;
  year: Int;
}

export interface PeriodPromise extends Promise<Period>, Fragmentable {
  id: () => Promise<ID_Output>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
  account: <T = gcAccountDataPromise>() => T;
  collab: <T = gcCollabDataPromise>() => T;
  connex: <T = gcConnexDataPromise>() => T;
  message: <T = gcMessageDataPromise>() => T;
  pedia: <T = gcPediaDataPromise>() => T;
  wiki: <T = gcWikiDataPromise>() => T;
}

export interface PeriodSubscription
  extends Promise<AsyncIterator<Period>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  month: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
  account: <T = gcAccountDataSubscription>() => T;
  collab: <T = gcCollabDataSubscription>() => T;
  connex: <T = gcConnexDataSubscription>() => T;
  message: <T = gcMessageDataSubscription>() => T;
  pedia: <T = gcPediaDataSubscription>() => T;
  wiki: <T = gcWikiDataSubscription>() => T;
}

export interface gcAccountData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface gcAccountDataPromise
  extends Promise<gcAccountData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
}

export interface gcAccountDataSubscription
  extends Promise<AsyncIterator<gcAccountData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
}

export interface PeriodSubscriptionPayload {
  mutation: MutationType;
  node: Period;
  updatedFields: String[];
  previousValues: PeriodPreviousValues;
}

export interface PeriodSubscriptionPayloadPromise
  extends Promise<PeriodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PeriodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PeriodPreviousValuesPromise>() => T;
}

export interface PeriodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PeriodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PeriodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PeriodPreviousValuesSubscription>() => T;
}

export interface gcMessageDataEdge {
  node: gcMessageData;
  cursor: String;
}

export interface gcMessageDataEdgePromise
  extends Promise<gcMessageDataEdge>,
    Fragmentable {
  node: <T = gcMessageDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcMessageDataEdgeSubscription
  extends Promise<AsyncIterator<gcMessageDataEdge>>,
    Fragmentable {
  node: <T = gcMessageDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PeriodPreviousValues {
  id: ID_Output;
  month: Int;
  year: Int;
}

export interface PeriodPreviousValuesPromise
  extends Promise<PeriodPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  month: () => Promise<Int>;
  year: () => Promise<Int>;
}

export interface PeriodPreviousValuesSubscription
  extends Promise<AsyncIterator<PeriodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  month: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
}

export interface gcCollabData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments: String[];
  mostActiveGroups: String[];
}

export interface gcCollabDataPromise
  extends Promise<gcCollabData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaData: <T = gaStatsPromise>() => T;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
  mostActiveDepartments: () => Promise<String[]>;
  mostActiveGroups: () => Promise<String[]>;
}

export interface gcCollabDataSubscription
  extends Promise<AsyncIterator<gcCollabData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  gaData: <T = gaStatsSubscription>() => T;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
  mostActiveDepartments: () => Promise<AsyncIterator<String[]>>;
  mostActiveGroups: () => Promise<AsyncIterator<String[]>>;
}

export interface gcConnexData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments: String[];
  mostActiveGroups: String[];
}

export interface gcConnexDataPromise
  extends Promise<gcConnexData>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaData: <T = gaStatsPromise>() => T;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
  mostActiveDepartments: () => Promise<String[]>;
  mostActiveGroups: () => Promise<String[]>;
}

export interface gcConnexDataSubscription
  extends Promise<AsyncIterator<gcConnexData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  gaData: <T = gaStatsSubscription>() => T;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
  mostActiveDepartments: () => Promise<AsyncIterator<String[]>>;
  mostActiveGroups: () => Promise<AsyncIterator<String[]>>;
}

export interface gcConnexDataEdge {
  node: gcConnexData;
  cursor: String;
}

export interface gcConnexDataEdgePromise
  extends Promise<gcConnexDataEdge>,
    Fragmentable {
  node: <T = gcConnexDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcConnexDataEdgeSubscription
  extends Promise<AsyncIterator<gcConnexDataEdge>>,
    Fragmentable {
  node: <T = gcConnexDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface gaStatsSubscriptionPayload {
  mutation: MutationType;
  node: gaStats;
  updatedFields: String[];
  previousValues: gaStatsPreviousValues;
}

export interface gaStatsSubscriptionPayloadPromise
  extends Promise<gaStatsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gaStatsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gaStatsPreviousValuesPromise>() => T;
}

export interface gaStatsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gaStatsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gaStatsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gaStatsPreviousValuesSubscription>() => T;
}

export interface gaStats {
  id: ID_Output;
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface gaStatsPromise extends Promise<gaStats>, Fragmentable {
  id: () => Promise<ID_Output>;
  numSessions: () => Promise<Int>;
  avgPageviewsPerSession: () => Promise<Float>;
  avgSessionDuration: () => Promise<Float>;
  avgPageLoadTime: () => Promise<Float>;
  bounceRate: () => Promise<Float>;
}

export interface gaStatsSubscription
  extends Promise<AsyncIterator<gaStats>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  numSessions: () => Promise<AsyncIterator<Int>>;
  avgPageviewsPerSession: () => Promise<AsyncIterator<Float>>;
  avgSessionDuration: () => Promise<AsyncIterator<Float>>;
  avgPageLoadTime: () => Promise<AsyncIterator<Float>>;
  bounceRate: () => Promise<AsyncIterator<Float>>;
}

export interface gaStatsPreviousValues {
  id: ID_Output;
  numSessions?: Int;
  avgPageviewsPerSession?: Float;
  avgSessionDuration?: Float;
  avgPageLoadTime?: Float;
  bounceRate?: Float;
}

export interface gaStatsPreviousValuesPromise
  extends Promise<gaStatsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  numSessions: () => Promise<Int>;
  avgPageviewsPerSession: () => Promise<Float>;
  avgSessionDuration: () => Promise<Float>;
  avgPageLoadTime: () => Promise<Float>;
  bounceRate: () => Promise<Float>;
}

export interface gaStatsPreviousValuesSubscription
  extends Promise<AsyncIterator<gaStatsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  numSessions: () => Promise<AsyncIterator<Int>>;
  avgPageviewsPerSession: () => Promise<AsyncIterator<Float>>;
  avgSessionDuration: () => Promise<AsyncIterator<Float>>;
  avgPageLoadTime: () => Promise<AsyncIterator<Float>>;
  bounceRate: () => Promise<AsyncIterator<Float>>;
}

export interface gcCollabDataEdge {
  node: gcCollabData;
  cursor: String;
}

export interface gcCollabDataEdgePromise
  extends Promise<gcCollabDataEdge>,
    Fragmentable {
  node: <T = gcCollabDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface gcCollabDataEdgeSubscription
  extends Promise<AsyncIterator<gcCollabDataEdge>>,
    Fragmentable {
  node: <T = gcCollabDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePeriod {
  count: Int;
}

export interface AggregatePeriodPromise
  extends Promise<AggregatePeriod>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePeriodSubscription
  extends Promise<AsyncIterator<AggregatePeriod>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcPediaDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcPediaDataPreviousValuesPromise
  extends Promise<gcPediaDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcPediaDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcPediaDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface gcAccountDataSubscriptionPayload {
  mutation: MutationType;
  node: gcAccountData;
  updatedFields: String[];
  previousValues: gcAccountDataPreviousValues;
}

export interface gcAccountDataSubscriptionPayloadPromise
  extends Promise<gcAccountDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcAccountDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcAccountDataPreviousValuesPromise>() => T;
}

export interface gcAccountDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcAccountDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcAccountDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcAccountDataPreviousValuesSubscription>() => T;
}

export interface gcWikiData {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumArticles?: Int;
  numNewArticles?: Int;
  totalNumEdits?: Int;
  numNewEdits?: Int;
}

export interface gcWikiDataPromise extends Promise<gcWikiData>, Fragmentable {
  id: () => Promise<ID_Output>;
  period: <T = PeriodPromise>() => T;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  gaData: <T = gaStatsPromise>() => T;
  totalNumArticles: () => Promise<Int>;
  numNewArticles: () => Promise<Int>;
  totalNumEdits: () => Promise<Int>;
  numNewEdits: () => Promise<Int>;
}

export interface gcWikiDataSubscription
  extends Promise<AsyncIterator<gcWikiData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  period: <T = PeriodSubscription>() => T;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  gaData: <T = gaStatsSubscription>() => T;
  totalNumArticles: () => Promise<AsyncIterator<Int>>;
  numNewArticles: () => Promise<AsyncIterator<Int>>;
  totalNumEdits: () => Promise<AsyncIterator<Int>>;
  numNewEdits: () => Promise<AsyncIterator<Int>>;
}

export interface gcAccountDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
}

export interface gcAccountDataPreviousValuesPromise
  extends Promise<gcAccountDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
}

export interface gcAccountDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcAccountDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
}

export interface gcWikiDataConnection {
  pageInfo: PageInfo;
  edges: gcWikiDataEdge[];
}

export interface gcWikiDataConnectionPromise
  extends Promise<gcWikiDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcWikiDataEdge>>() => T;
  aggregate: <T = AggregategcWikiDataPromise>() => T;
}

export interface gcWikiDataConnectionSubscription
  extends Promise<AsyncIterator<gcWikiDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcWikiDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcWikiDataSubscription>() => T;
}

export interface PeriodEdge {
  node: Period;
  cursor: String;
}

export interface PeriodEdgePromise extends Promise<PeriodEdge>, Fragmentable {
  node: <T = PeriodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PeriodEdgeSubscription
  extends Promise<AsyncIterator<PeriodEdge>>,
    Fragmentable {
  node: <T = PeriodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface gcPediaDataConnection {
  pageInfo: PageInfo;
  edges: gcPediaDataEdge[];
}

export interface gcPediaDataConnectionPromise
  extends Promise<gcPediaDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcPediaDataEdge>>() => T;
  aggregate: <T = AggregategcPediaDataPromise>() => T;
}

export interface gcPediaDataConnectionSubscription
  extends Promise<AsyncIterator<gcPediaDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcPediaDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcPediaDataSubscription>() => T;
}

export interface gcCollabDataSubscriptionPayload {
  mutation: MutationType;
  node: gcCollabData;
  updatedFields: String[];
  previousValues: gcCollabDataPreviousValues;
}

export interface gcCollabDataSubscriptionPayloadPromise
  extends Promise<gcCollabDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcCollabDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcCollabDataPreviousValuesPromise>() => T;
}

export interface gcCollabDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcCollabDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcCollabDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcCollabDataPreviousValuesSubscription>() => T;
}

export interface gcMessageDataConnection {
  pageInfo: PageInfo;
  edges: gcMessageDataEdge[];
}

export interface gcMessageDataConnectionPromise
  extends Promise<gcMessageDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcMessageDataEdge>>() => T;
  aggregate: <T = AggregategcMessageDataPromise>() => T;
}

export interface gcMessageDataConnectionSubscription
  extends Promise<AsyncIterator<gcMessageDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcMessageDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcMessageDataSubscription>() => T;
}

export interface gcCollabDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments: String[];
  mostActiveGroups: String[];
}

export interface gcCollabDataPreviousValuesPromise
  extends Promise<gcCollabDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
  mostActiveDepartments: () => Promise<String[]>;
  mostActiveGroups: () => Promise<String[]>;
}

export interface gcCollabDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcCollabDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
  mostActiveDepartments: () => Promise<AsyncIterator<String[]>>;
  mostActiveGroups: () => Promise<AsyncIterator<String[]>>;
}

export interface gcConnexDataConnection {
  pageInfo: PageInfo;
  edges: gcConnexDataEdge[];
}

export interface gcConnexDataConnectionPromise
  extends Promise<gcConnexDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcConnexDataEdge>>() => T;
  aggregate: <T = AggregategcConnexDataPromise>() => T;
}

export interface gcConnexDataConnectionSubscription
  extends Promise<AsyncIterator<gcConnexDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcConnexDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcConnexDataSubscription>() => T;
}

export interface gcPediaDataSubscriptionPayload {
  mutation: MutationType;
  node: gcPediaData;
  updatedFields: String[];
  previousValues: gcPediaDataPreviousValues;
}

export interface gcPediaDataSubscriptionPayloadPromise
  extends Promise<gcPediaDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcPediaDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcPediaDataPreviousValuesPromise>() => T;
}

export interface gcPediaDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcPediaDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcPediaDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcPediaDataPreviousValuesSubscription>() => T;
}

export interface gcCollabDataConnection {
  pageInfo: PageInfo;
  edges: gcCollabDataEdge[];
}

export interface gcCollabDataConnectionPromise
  extends Promise<gcCollabDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<gcCollabDataEdge>>() => T;
  aggregate: <T = AggregategcCollabDataPromise>() => T;
}

export interface gcCollabDataConnectionSubscription
  extends Promise<AsyncIterator<gcCollabDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<gcCollabDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregategcCollabDataSubscription>() => T;
}

export interface gcConnexDataSubscriptionPayload {
  mutation: MutationType;
  node: gcConnexData;
  updatedFields: String[];
  previousValues: gcConnexDataPreviousValues;
}

export interface gcConnexDataSubscriptionPayloadPromise
  extends Promise<gcConnexDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcConnexDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcConnexDataPreviousValuesPromise>() => T;
}

export interface gcConnexDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcConnexDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcConnexDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcConnexDataPreviousValuesSubscription>() => T;
}

export interface AggregategcWikiData {
  count: Int;
}

export interface AggregategcWikiDataPromise
  extends Promise<AggregategcWikiData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcWikiDataSubscription
  extends Promise<AsyncIterator<AggregategcWikiData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregategcMessageData {
  count: Int;
}

export interface AggregategcMessageDataPromise
  extends Promise<AggregategcMessageData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcMessageDataSubscription
  extends Promise<AsyncIterator<AggregategcMessageData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface gcMessageDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumChannelMessages?: Int;
  numNewChannelMessages?: Int;
  totalNumPrivateGroupMessages?: Int;
  numNewPrivateGroupMessages?: Int;
  totalNumDirectMessages?: Int;
  numNewDirectMessages?: Int;
  totalNumFileUploads?: Int;
  numNewFileUploads?: Int;
}

export interface gcMessageDataPreviousValuesPromise
  extends Promise<gcMessageDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumChannelMessages: () => Promise<Int>;
  numNewChannelMessages: () => Promise<Int>;
  totalNumPrivateGroupMessages: () => Promise<Int>;
  numNewPrivateGroupMessages: () => Promise<Int>;
  totalNumDirectMessages: () => Promise<Int>;
  numNewDirectMessages: () => Promise<Int>;
  totalNumFileUploads: () => Promise<Int>;
  numNewFileUploads: () => Promise<Int>;
}

export interface gcMessageDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcMessageDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumChannelMessages: () => Promise<AsyncIterator<Int>>;
  numNewChannelMessages: () => Promise<AsyncIterator<Int>>;
  totalNumPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  numNewPrivateGroupMessages: () => Promise<AsyncIterator<Int>>;
  totalNumDirectMessages: () => Promise<AsyncIterator<Int>>;
  numNewDirectMessages: () => Promise<AsyncIterator<Int>>;
  totalNumFileUploads: () => Promise<AsyncIterator<Int>>;
  numNewFileUploads: () => Promise<AsyncIterator<Int>>;
}

export interface gcMessageDataSubscriptionPayload {
  mutation: MutationType;
  node: gcMessageData;
  updatedFields: String[];
  previousValues: gcMessageDataPreviousValues;
}

export interface gcMessageDataSubscriptionPayloadPromise
  extends Promise<gcMessageDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = gcMessageDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = gcMessageDataPreviousValuesPromise>() => T;
}

export interface gcMessageDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<gcMessageDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = gcMessageDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = gcMessageDataPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface gcConnexDataPreviousValues {
  id: ID_Output;
  totalNumAccounts?: Int;
  numNewAccounts?: Int;
  totalNumGroups?: Int;
  numNewGroups?: Int;
  mostActiveDepartments: String[];
  mostActiveGroups: String[];
}

export interface gcConnexDataPreviousValuesPromise
  extends Promise<gcConnexDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  totalNumAccounts: () => Promise<Int>;
  numNewAccounts: () => Promise<Int>;
  totalNumGroups: () => Promise<Int>;
  numNewGroups: () => Promise<Int>;
  mostActiveDepartments: () => Promise<String[]>;
  mostActiveGroups: () => Promise<String[]>;
}

export interface gcConnexDataPreviousValuesSubscription
  extends Promise<AsyncIterator<gcConnexDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  totalNumAccounts: () => Promise<AsyncIterator<Int>>;
  numNewAccounts: () => Promise<AsyncIterator<Int>>;
  totalNumGroups: () => Promise<AsyncIterator<Int>>;
  numNewGroups: () => Promise<AsyncIterator<Int>>;
  mostActiveDepartments: () => Promise<AsyncIterator<String[]>>;
  mostActiveGroups: () => Promise<AsyncIterator<String[]>>;
}

export interface AggregategcConnexData {
  count: Int;
}

export interface AggregategcConnexDataPromise
  extends Promise<AggregategcConnexData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcConnexDataSubscription
  extends Promise<AsyncIterator<AggregategcConnexData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregategcPediaData {
  count: Int;
}

export interface AggregategcPediaDataPromise
  extends Promise<AggregategcPediaData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcPediaDataSubscription
  extends Promise<AsyncIterator<AggregategcPediaData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregategcAccountData {
  count: Int;
}

export interface AggregategcAccountDataPromise
  extends Promise<AggregategcAccountData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcAccountDataSubscription
  extends Promise<AsyncIterator<AggregategcAccountData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregategcCollabData {
  count: Int;
}

export interface AggregategcCollabDataPromise
  extends Promise<AggregategcCollabData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregategcCollabDataSubscription
  extends Promise<AsyncIterator<AggregategcCollabData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Period",
    embedded: false
  },
  {
    name: "gaStats",
    embedded: false
  },
  {
    name: "gcAccountData",
    embedded: false
  },
  {
    name: "gcCollabData",
    embedded: false
  },
  {
    name: "gcConnexData",
    embedded: false
  },
  {
    name: "gcMessageData",
    embedded: false
  },
  {
    name: "gcPediaData",
    embedded: false
  },
  {
    name: "gcWikiData",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/reporting`
});
export const prisma = new Prisma();
